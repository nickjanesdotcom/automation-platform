{
  "version": 3,
  "sources": ["../src/config.ts", "../src/shared/utils/logger.ts", "../src/shared/utils/retry.ts", "../src/shared/services/slack.ts", "../node_modules/hono/dist/compose.js", "../node_modules/hono/dist/request/constants.js", "../node_modules/hono/dist/utils/body.js", "../node_modules/hono/dist/utils/url.js", "../node_modules/hono/dist/request.js", "../node_modules/hono/dist/utils/html.js", "../node_modules/hono/dist/context.js", "../node_modules/hono/dist/router.js", "../node_modules/hono/dist/utils/constants.js", "../node_modules/hono/dist/hono-base.js", "../node_modules/hono/dist/router/reg-exp-router/matcher.js", "../node_modules/hono/dist/router/reg-exp-router/node.js", "../node_modules/hono/dist/router/reg-exp-router/trie.js", "../node_modules/hono/dist/router/reg-exp-router/router.js", "../node_modules/hono/dist/router/smart-router/router.js", "../node_modules/hono/dist/router/trie-router/node.js", "../node_modules/hono/dist/router/trie-router/router.js", "../node_modules/hono/dist/hono.js", "../node_modules/hono/dist/middleware/cors/index.js", "../node_modules/hono/dist/utils/color.js", "../node_modules/hono/dist/middleware/logger/index.js", "../src/app.ts", "../src/automations/lead-management/config.ts", "../src/automations/lead-management/webhooks/gmail.ts", "../src/shared/utils/monitor.ts", "../src/shared/services/notion.ts", "../src/automations/lead-management/workflows/process-lead.ts", "../src/shared/utils/parser.ts", "../src/automations/lead-management/workflows/manage-company.ts", "../src/automations/lead-management/workflows/manage-contact.ts", "../src/automations/lead-management/webhooks/calcom.ts", "../src/automations/lead-management/workflows/handle-booking.ts", "../src/shared/utils/format.ts", "../src/automations/lead-management/webhooks/slack.ts", "../src/shared/services/email.ts", "../src/automations/lead-management/workflows/accept-lead.ts", "../src/automations/lead-management/webhooks/test.ts", "../src/shared/middleware/auth.ts", "../src/automations/lead-management/index.ts", "../src/core/automation-registry.ts", "_entry.ts"],
  "sourcesContent": ["/**\n * Global platform configuration.\n * Shared settings across all automations.\n */\n\nexport const config = {\n  env: process.env.NODE_ENV || 'development',\n  port: parseInt(process.env.PORT || '8787'),\n\n  // Shared service credentials\n  notion: {\n    apiKey: process.env.NOTION_API_KEY!,\n  },\n\n  slack: {\n    botToken: process.env.SLACK_BOT_TOKEN!,\n    signingSecret: process.env.SLACK_SIGNING_SECRET || '',\n  },\n\n  email: {\n    smtp: {\n      host: process.env.SMTP_HOST || 'smtp.gmail.com',\n      port: parseInt(process.env.SMTP_PORT || '587'),\n      user: process.env.SMTP_USER || '',\n      pass: process.env.SMTP_PASS || '',\n    },\n    from: process.env.FROM_EMAIL || '',\n    fromName: process.env.FROM_NAME || 'Automation Platform',\n  },\n\n  observability: {\n    axiom: {\n      token: process.env.AXIOM_TOKEN || '',\n      dataset: process.env.AXIOM_DATASET || 'automation-platform',\n    },\n    sentry: {\n      dsn: process.env.SENTRY_DSN || '',\n    },\n  },\n} as const;\n\n// Validate required variables\nif (!config.notion.apiKey) {\n  throw new Error('NOTION_API_KEY is required');\n}\n\nif (!config.slack.botToken) {\n  throw new Error('SLACK_BOT_TOKEN is required');\n}\n", "/**\n * Centralized logging with Axiom integration.\n */\n\nimport { Axiom } from '@axiomhq/js';\nimport { config } from '../../config.js';\nimport type { LogContext, LogLevel } from '../../types.js';\n\n// Initialize Axiom client\nlet axiom: Axiom | null = null;\n\nif (config.observability.axiom.token) {\n  axiom = new Axiom({\n    token: config.observability.axiom.token,\n  });\n}\n\n/**\n * Log a message with context\n */\nfunction log(level: LogLevel, message: string, context: LogContext = {}) {\n  const timestamp = new Date().toISOString();\n  const logData = {\n    timestamp,\n    level,\n    message,\n    environment: config.env,\n    ...context,\n  };\n\n  // Console output (development)\n  if (config.env === 'development') {\n    const emoji =\n      level === 'error' ? '\u274C' : level === 'warn' ? '\u26A0\uFE0F' : level === 'debug' ? '\uD83D\uDD0D' : '\u2139\uFE0F';\n    console.log(`${emoji} [${level.toUpperCase()}] ${message}`, context);\n  }\n\n  // Send to Axiom (if configured)\n  if (axiom) {\n    try {\n      axiom.ingest(config.observability.axiom.dataset, [logData]);\n    } catch (error) {\n      console.error('Failed to send log to Axiom:', error);\n    }\n  }\n}\n\n/**\n * Log info message\n */\nexport function info(message: string, context: LogContext = {}) {\n  log('info', message, context);\n}\n\n/**\n * Log warning message\n */\nexport function warn(message: string, context: LogContext = {}) {\n  log('warn', message, context);\n}\n\n/**\n * Log error message\n */\nexport function error(message: string, errorObj?: Error | unknown, context: LogContext = {}) {\n  const errorContext = errorObj instanceof Error\n    ? {\n        error: errorObj.message,\n        stack: errorObj.stack,\n      }\n    : { error: String(errorObj) };\n\n  log('error', message, { ...context, ...errorContext });\n}\n\n/**\n * Log debug message\n */\nexport function debug(message: string, context: LogContext = {}) {\n  if (config.env === 'development') {\n    log('debug', message, context);\n  }\n}\n\n/**\n * Flush logs (for serverless environments)\n */\nexport async function flush() {\n  if (axiom) {\n    try {\n      await axiom.flush();\n    } catch (error) {\n      console.error('Failed to flush logs:', error);\n    }\n  }\n}\n\nexport const logger = {\n  info,\n  warn,\n  error,\n  debug,\n  flush,\n};\n", "/**\n * Retry logic with exponential backoff using p-retry.\n */\n\nimport pRetry from 'p-retry';\nimport { logger } from './logger.js';\n\nexport interface RetryOptions {\n  retries?: number;\n  minTimeout?: number;\n  maxTimeout?: number;\n  onFailedAttempt?: (error: any) => void;\n}\n\n/**\n * Retry a function with exponential backoff\n */\nexport async function withRetry<T>(\n  fn: () => Promise<T>,\n  options: RetryOptions = {}\n): Promise<T> {\n  const {\n    retries = 3,\n    minTimeout = 1000,\n    maxTimeout = 5000,\n    onFailedAttempt,\n  } = options;\n\n  return pRetry(fn, {\n    retries,\n    minTimeout,\n    maxTimeout,\n    onFailedAttempt: (error) => {\n      logger.warn(`Retry attempt ${error.attemptNumber} failed`, {\n        error: error.message,\n        retriesLeft: error.retriesLeft,\n      });\n\n      if (onFailedAttempt) {\n        onFailedAttempt(error);\n      }\n    },\n  });\n}\n", "/**\n * Generic Slack service used by all automations.\n */\n\nimport { WebClient } from '@slack/web-api';\nimport { config } from '../../config.js';\nimport { withRetry } from '../utils/retry.js';\nimport { logger } from '../utils/logger.js';\n\nconst slack = new WebClient(config.slack.botToken);\n\n/**\n * Send a message to a channel\n */\nexport async function sendMessage(channel: string, text: string, blocks?: any[]) {\n  logger.info('Sending Slack message', { channel });\n\n  const result = await withRetry(() =>\n    slack.chat.postMessage({\n      channel,\n      text,\n      blocks,\n    })\n  );\n\n  return {\n    ts: result.ts!,\n    channel: result.channel!,\n  };\n}\n\n/**\n * Send a threaded reply\n */\nexport async function sendThreadReply(\n  channel: string,\n  threadTs: string,\n  text: string,\n  blocks?: any[]\n) {\n  logger.info('Sending Slack thread reply', { channel, threadTs });\n\n  return withRetry(() =>\n    slack.chat.postMessage({\n      channel,\n      thread_ts: threadTs,\n      text,\n      blocks,\n    })\n  );\n}\n\n/**\n * Update a message\n */\nexport async function updateMessage(\n  channel: string,\n  ts: string,\n  text: string,\n  blocks?: any[]\n) {\n  logger.info('Updating Slack message', { channel, ts });\n\n  return withRetry(() =>\n    slack.chat.update({\n      channel,\n      ts,\n      text,\n      blocks,\n    })\n  );\n}\n\n/**\n * Send alert to alerts channel\n */\nexport async function sendAlert(\n  title: string,\n  message: string,\n  severity: 'info' | 'warning' | 'error' = 'error'\n) {\n  const emoji = severity === 'error' ? '\uD83D\uDEA8' : severity === 'warning' ? '\u26A0\uFE0F' : '\u2139\uFE0F';\n\n  // Use a dedicated alerts channel if configured\n  const alertsChannel = process.env.SLACK_ALERTS_CHANNEL_ID || config.slack.botToken;\n\n  return sendMessage(alertsChannel, `${emoji} ${title}`, [\n    {\n      type: 'header',\n      text: {\n        type: 'plain_text',\n        text: `${emoji} ${title}`,\n      },\n    },\n    {\n      type: 'section',\n      text: {\n        type: 'mrkdwn',\n        text: message,\n      },\n    },\n  ]);\n}\n\n/**\n * Send a direct message to a user\n */\nexport async function sendDM(userId: string, text: string, blocks?: any[]) {\n  logger.info('Sending Slack DM', { userId });\n\n  // Open a conversation with the user\n  const conversation = await slack.conversations.open({\n    users: userId,\n  });\n\n  if (!conversation.channel?.id) {\n    throw new Error('Failed to open conversation');\n  }\n\n  return sendMessage(conversation.channel.id, text, blocks);\n}\n\n/**\n * Get user info\n */\nexport async function getUserInfo(userId: string) {\n  return withRetry(() => slack.users.info({ user: userId }));\n}\n\n/**\n * Add reaction to message\n */\nexport async function addReaction(channel: string, timestamp: string, emoji: string) {\n  return withRetry(() =>\n    slack.reactions.add({\n      channel,\n      timestamp,\n      name: emoji,\n    })\n  );\n}\n", "// src/compose.ts\nvar compose = (middleware, onError, onNotFound) => {\n  return (context, next) => {\n    let index = -1;\n    return dispatch(0);\n    async function dispatch(i) {\n      if (i <= index) {\n        throw new Error(\"next() called multiple times\");\n      }\n      index = i;\n      let res;\n      let isError = false;\n      let handler;\n      if (middleware[i]) {\n        handler = middleware[i][0][0];\n        context.req.routeIndex = i;\n      } else {\n        handler = i === middleware.length && next || void 0;\n      }\n      if (handler) {\n        try {\n          res = await handler(context, () => dispatch(i + 1));\n        } catch (err) {\n          if (err instanceof Error && onError) {\n            context.error = err;\n            res = await onError(err, context);\n            isError = true;\n          } else {\n            throw err;\n          }\n        }\n      } else {\n        if (context.finalized === false && onNotFound) {\n          res = await onNotFound(context);\n        }\n      }\n      if (res && (context.finalized === false || isError)) {\n        context.res = res;\n      }\n      return context;\n    }\n  };\n};\nexport {\n  compose\n};\n", "// src/request/constants.ts\nvar GET_MATCH_RESULT = Symbol();\nexport {\n  GET_MATCH_RESULT\n};\n", "// src/utils/body.ts\nimport { HonoRequest } from \"../request.js\";\nvar parseBody = async (request, options = /* @__PURE__ */ Object.create(null)) => {\n  const { all = false, dot = false } = options;\n  const headers = request instanceof HonoRequest ? request.raw.headers : request.headers;\n  const contentType = headers.get(\"Content-Type\");\n  if (contentType?.startsWith(\"multipart/form-data\") || contentType?.startsWith(\"application/x-www-form-urlencoded\")) {\n    return parseFormData(request, { all, dot });\n  }\n  return {};\n};\nasync function parseFormData(request, options) {\n  const formData = await request.formData();\n  if (formData) {\n    return convertFormDataToBodyData(formData, options);\n  }\n  return {};\n}\nfunction convertFormDataToBodyData(formData, options) {\n  const form = /* @__PURE__ */ Object.create(null);\n  formData.forEach((value, key) => {\n    const shouldParseAllValues = options.all || key.endsWith(\"[]\");\n    if (!shouldParseAllValues) {\n      form[key] = value;\n    } else {\n      handleParsingAllValues(form, key, value);\n    }\n  });\n  if (options.dot) {\n    Object.entries(form).forEach(([key, value]) => {\n      const shouldParseDotValues = key.includes(\".\");\n      if (shouldParseDotValues) {\n        handleParsingNestedValues(form, key, value);\n        delete form[key];\n      }\n    });\n  }\n  return form;\n}\nvar handleParsingAllValues = (form, key, value) => {\n  if (form[key] !== void 0) {\n    if (Array.isArray(form[key])) {\n      ;\n      form[key].push(value);\n    } else {\n      form[key] = [form[key], value];\n    }\n  } else {\n    if (!key.endsWith(\"[]\")) {\n      form[key] = value;\n    } else {\n      form[key] = [value];\n    }\n  }\n};\nvar handleParsingNestedValues = (form, key, value) => {\n  let nestedForm = form;\n  const keys = key.split(\".\");\n  keys.forEach((key2, index) => {\n    if (index === keys.length - 1) {\n      nestedForm[key2] = value;\n    } else {\n      if (!nestedForm[key2] || typeof nestedForm[key2] !== \"object\" || Array.isArray(nestedForm[key2]) || nestedForm[key2] instanceof File) {\n        nestedForm[key2] = /* @__PURE__ */ Object.create(null);\n      }\n      nestedForm = nestedForm[key2];\n    }\n  });\n};\nexport {\n  parseBody\n};\n", "// src/utils/url.ts\nvar splitPath = (path) => {\n  const paths = path.split(\"/\");\n  if (paths[0] === \"\") {\n    paths.shift();\n  }\n  return paths;\n};\nvar splitRoutingPath = (routePath) => {\n  const { groups, path } = extractGroupsFromPath(routePath);\n  const paths = splitPath(path);\n  return replaceGroupMarks(paths, groups);\n};\nvar extractGroupsFromPath = (path) => {\n  const groups = [];\n  path = path.replace(/\\{[^}]+\\}/g, (match, index) => {\n    const mark = `@${index}`;\n    groups.push([mark, match]);\n    return mark;\n  });\n  return { groups, path };\n};\nvar replaceGroupMarks = (paths, groups) => {\n  for (let i = groups.length - 1; i >= 0; i--) {\n    const [mark] = groups[i];\n    for (let j = paths.length - 1; j >= 0; j--) {\n      if (paths[j].includes(mark)) {\n        paths[j] = paths[j].replace(mark, groups[i][1]);\n        break;\n      }\n    }\n  }\n  return paths;\n};\nvar patternCache = {};\nvar getPattern = (label, next) => {\n  if (label === \"*\") {\n    return \"*\";\n  }\n  const match = label.match(/^\\:([^\\{\\}]+)(?:\\{(.+)\\})?$/);\n  if (match) {\n    const cacheKey = `${label}#${next}`;\n    if (!patternCache[cacheKey]) {\n      if (match[2]) {\n        patternCache[cacheKey] = next && next[0] !== \":\" && next[0] !== \"*\" ? [cacheKey, match[1], new RegExp(`^${match[2]}(?=/${next})`)] : [label, match[1], new RegExp(`^${match[2]}$`)];\n      } else {\n        patternCache[cacheKey] = [label, match[1], true];\n      }\n    }\n    return patternCache[cacheKey];\n  }\n  return null;\n};\nvar tryDecode = (str, decoder) => {\n  try {\n    return decoder(str);\n  } catch {\n    return str.replace(/(?:%[0-9A-Fa-f]{2})+/g, (match) => {\n      try {\n        return decoder(match);\n      } catch {\n        return match;\n      }\n    });\n  }\n};\nvar tryDecodeURI = (str) => tryDecode(str, decodeURI);\nvar getPath = (request) => {\n  const url = request.url;\n  const start = url.indexOf(\"/\", url.indexOf(\":\") + 4);\n  let i = start;\n  for (; i < url.length; i++) {\n    const charCode = url.charCodeAt(i);\n    if (charCode === 37) {\n      const queryIndex = url.indexOf(\"?\", i);\n      const path = url.slice(start, queryIndex === -1 ? void 0 : queryIndex);\n      return tryDecodeURI(path.includes(\"%25\") ? path.replace(/%25/g, \"%2525\") : path);\n    } else if (charCode === 63) {\n      break;\n    }\n  }\n  return url.slice(start, i);\n};\nvar getQueryStrings = (url) => {\n  const queryIndex = url.indexOf(\"?\", 8);\n  return queryIndex === -1 ? \"\" : \"?\" + url.slice(queryIndex + 1);\n};\nvar getPathNoStrict = (request) => {\n  const result = getPath(request);\n  return result.length > 1 && result.at(-1) === \"/\" ? result.slice(0, -1) : result;\n};\nvar mergePath = (base, sub, ...rest) => {\n  if (rest.length) {\n    sub = mergePath(sub, ...rest);\n  }\n  return `${base?.[0] === \"/\" ? \"\" : \"/\"}${base}${sub === \"/\" ? \"\" : `${base?.at(-1) === \"/\" ? \"\" : \"/\"}${sub?.[0] === \"/\" ? sub.slice(1) : sub}`}`;\n};\nvar checkOptionalParameter = (path) => {\n  if (path.charCodeAt(path.length - 1) !== 63 || !path.includes(\":\")) {\n    return null;\n  }\n  const segments = path.split(\"/\");\n  const results = [];\n  let basePath = \"\";\n  segments.forEach((segment) => {\n    if (segment !== \"\" && !/\\:/.test(segment)) {\n      basePath += \"/\" + segment;\n    } else if (/\\:/.test(segment)) {\n      if (/\\?/.test(segment)) {\n        if (results.length === 0 && basePath === \"\") {\n          results.push(\"/\");\n        } else {\n          results.push(basePath);\n        }\n        const optionalSegment = segment.replace(\"?\", \"\");\n        basePath += \"/\" + optionalSegment;\n        results.push(basePath);\n      } else {\n        basePath += \"/\" + segment;\n      }\n    }\n  });\n  return results.filter((v, i, a) => a.indexOf(v) === i);\n};\nvar _decodeURI = (value) => {\n  if (!/[%+]/.test(value)) {\n    return value;\n  }\n  if (value.indexOf(\"+\") !== -1) {\n    value = value.replace(/\\+/g, \" \");\n  }\n  return value.indexOf(\"%\") !== -1 ? tryDecode(value, decodeURIComponent_) : value;\n};\nvar _getQueryParam = (url, key, multiple) => {\n  let encoded;\n  if (!multiple && key && !/[%+]/.test(key)) {\n    let keyIndex2 = url.indexOf(`?${key}`, 8);\n    if (keyIndex2 === -1) {\n      keyIndex2 = url.indexOf(`&${key}`, 8);\n    }\n    while (keyIndex2 !== -1) {\n      const trailingKeyCode = url.charCodeAt(keyIndex2 + key.length + 1);\n      if (trailingKeyCode === 61) {\n        const valueIndex = keyIndex2 + key.length + 2;\n        const endIndex = url.indexOf(\"&\", valueIndex);\n        return _decodeURI(url.slice(valueIndex, endIndex === -1 ? void 0 : endIndex));\n      } else if (trailingKeyCode == 38 || isNaN(trailingKeyCode)) {\n        return \"\";\n      }\n      keyIndex2 = url.indexOf(`&${key}`, keyIndex2 + 1);\n    }\n    encoded = /[%+]/.test(url);\n    if (!encoded) {\n      return void 0;\n    }\n  }\n  const results = {};\n  encoded ??= /[%+]/.test(url);\n  let keyIndex = url.indexOf(\"?\", 8);\n  while (keyIndex !== -1) {\n    const nextKeyIndex = url.indexOf(\"&\", keyIndex + 1);\n    let valueIndex = url.indexOf(\"=\", keyIndex);\n    if (valueIndex > nextKeyIndex && nextKeyIndex !== -1) {\n      valueIndex = -1;\n    }\n    let name = url.slice(\n      keyIndex + 1,\n      valueIndex === -1 ? nextKeyIndex === -1 ? void 0 : nextKeyIndex : valueIndex\n    );\n    if (encoded) {\n      name = _decodeURI(name);\n    }\n    keyIndex = nextKeyIndex;\n    if (name === \"\") {\n      continue;\n    }\n    let value;\n    if (valueIndex === -1) {\n      value = \"\";\n    } else {\n      value = url.slice(valueIndex + 1, nextKeyIndex === -1 ? void 0 : nextKeyIndex);\n      if (encoded) {\n        value = _decodeURI(value);\n      }\n    }\n    if (multiple) {\n      if (!(results[name] && Array.isArray(results[name]))) {\n        results[name] = [];\n      }\n      ;\n      results[name].push(value);\n    } else {\n      results[name] ??= value;\n    }\n  }\n  return key ? results[key] : results;\n};\nvar getQueryParam = _getQueryParam;\nvar getQueryParams = (url, key) => {\n  return _getQueryParam(url, key, true);\n};\nvar decodeURIComponent_ = decodeURIComponent;\nexport {\n  checkOptionalParameter,\n  decodeURIComponent_,\n  getPath,\n  getPathNoStrict,\n  getPattern,\n  getQueryParam,\n  getQueryParams,\n  getQueryStrings,\n  mergePath,\n  splitPath,\n  splitRoutingPath,\n  tryDecode\n};\n", "// src/request.ts\nimport { HTTPException } from \"./http-exception.js\";\nimport { GET_MATCH_RESULT } from \"./request/constants.js\";\nimport { parseBody } from \"./utils/body.js\";\nimport { decodeURIComponent_, getQueryParam, getQueryParams, tryDecode } from \"./utils/url.js\";\nvar tryDecodeURIComponent = (str) => tryDecode(str, decodeURIComponent_);\nvar HonoRequest = class {\n  raw;\n  #validatedData;\n  #matchResult;\n  routeIndex = 0;\n  path;\n  bodyCache = {};\n  constructor(request, path = \"/\", matchResult = [[]]) {\n    this.raw = request;\n    this.path = path;\n    this.#matchResult = matchResult;\n    this.#validatedData = {};\n  }\n  param(key) {\n    return key ? this.#getDecodedParam(key) : this.#getAllDecodedParams();\n  }\n  #getDecodedParam(key) {\n    const paramKey = this.#matchResult[0][this.routeIndex][1][key];\n    const param = this.#getParamValue(paramKey);\n    return param && /\\%/.test(param) ? tryDecodeURIComponent(param) : param;\n  }\n  #getAllDecodedParams() {\n    const decoded = {};\n    const keys = Object.keys(this.#matchResult[0][this.routeIndex][1]);\n    for (const key of keys) {\n      const value = this.#getParamValue(this.#matchResult[0][this.routeIndex][1][key]);\n      if (value !== void 0) {\n        decoded[key] = /\\%/.test(value) ? tryDecodeURIComponent(value) : value;\n      }\n    }\n    return decoded;\n  }\n  #getParamValue(paramKey) {\n    return this.#matchResult[1] ? this.#matchResult[1][paramKey] : paramKey;\n  }\n  query(key) {\n    return getQueryParam(this.url, key);\n  }\n  queries(key) {\n    return getQueryParams(this.url, key);\n  }\n  header(name) {\n    if (name) {\n      return this.raw.headers.get(name) ?? void 0;\n    }\n    const headerData = {};\n    this.raw.headers.forEach((value, key) => {\n      headerData[key] = value;\n    });\n    return headerData;\n  }\n  async parseBody(options) {\n    return this.bodyCache.parsedBody ??= await parseBody(this, options);\n  }\n  #cachedBody = (key) => {\n    const { bodyCache, raw } = this;\n    const cachedBody = bodyCache[key];\n    if (cachedBody) {\n      return cachedBody;\n    }\n    const anyCachedKey = Object.keys(bodyCache)[0];\n    if (anyCachedKey) {\n      return bodyCache[anyCachedKey].then((body) => {\n        if (anyCachedKey === \"json\") {\n          body = JSON.stringify(body);\n        }\n        return new Response(body)[key]();\n      });\n    }\n    return bodyCache[key] = raw[key]();\n  };\n  json() {\n    return this.#cachedBody(\"text\").then((text) => JSON.parse(text));\n  }\n  text() {\n    return this.#cachedBody(\"text\");\n  }\n  arrayBuffer() {\n    return this.#cachedBody(\"arrayBuffer\");\n  }\n  blob() {\n    return this.#cachedBody(\"blob\");\n  }\n  formData() {\n    return this.#cachedBody(\"formData\");\n  }\n  addValidatedData(target, data) {\n    this.#validatedData[target] = data;\n  }\n  valid(target) {\n    return this.#validatedData[target];\n  }\n  get url() {\n    return this.raw.url;\n  }\n  get method() {\n    return this.raw.method;\n  }\n  get [GET_MATCH_RESULT]() {\n    return this.#matchResult;\n  }\n  get matchedRoutes() {\n    return this.#matchResult[0].map(([[, route]]) => route);\n  }\n  get routePath() {\n    return this.#matchResult[0].map(([[, route]]) => route)[this.routeIndex].path;\n  }\n};\nvar cloneRawRequest = async (req) => {\n  if (!req.raw.bodyUsed) {\n    return req.raw.clone();\n  }\n  const cacheKey = Object.keys(req.bodyCache)[0];\n  if (!cacheKey) {\n    throw new HTTPException(500, {\n      message: \"Cannot clone request: body was already consumed and not cached. Please use HonoRequest methods (e.g., req.json(), req.text()) instead of consuming req.raw directly.\"\n    });\n  }\n  const requestInit = {\n    body: await req[cacheKey](),\n    cache: req.raw.cache,\n    credentials: req.raw.credentials,\n    headers: req.header(),\n    integrity: req.raw.integrity,\n    keepalive: req.raw.keepalive,\n    method: req.method,\n    mode: req.raw.mode,\n    redirect: req.raw.redirect,\n    referrer: req.raw.referrer,\n    referrerPolicy: req.raw.referrerPolicy,\n    signal: req.raw.signal\n  };\n  return new Request(req.url, requestInit);\n};\nexport {\n  HonoRequest,\n  cloneRawRequest\n};\n", "// src/utils/html.ts\nvar HtmlEscapedCallbackPhase = {\n  Stringify: 1,\n  BeforeStream: 2,\n  Stream: 3\n};\nvar raw = (value, callbacks) => {\n  const escapedString = new String(value);\n  escapedString.isEscaped = true;\n  escapedString.callbacks = callbacks;\n  return escapedString;\n};\nvar escapeRe = /[&<>'\"]/;\nvar stringBufferToString = async (buffer, callbacks) => {\n  let str = \"\";\n  callbacks ||= [];\n  const resolvedBuffer = await Promise.all(buffer);\n  for (let i = resolvedBuffer.length - 1; ; i--) {\n    str += resolvedBuffer[i];\n    i--;\n    if (i < 0) {\n      break;\n    }\n    let r = resolvedBuffer[i];\n    if (typeof r === \"object\") {\n      callbacks.push(...r.callbacks || []);\n    }\n    const isEscaped = r.isEscaped;\n    r = await (typeof r === \"object\" ? r.toString() : r);\n    if (typeof r === \"object\") {\n      callbacks.push(...r.callbacks || []);\n    }\n    if (r.isEscaped ?? isEscaped) {\n      str += r;\n    } else {\n      const buf = [str];\n      escapeToBuffer(r, buf);\n      str = buf[0];\n    }\n  }\n  return raw(str, callbacks);\n};\nvar escapeToBuffer = (str, buffer) => {\n  const match = str.search(escapeRe);\n  if (match === -1) {\n    buffer[0] += str;\n    return;\n  }\n  let escape;\n  let index;\n  let lastIndex = 0;\n  for (index = match; index < str.length; index++) {\n    switch (str.charCodeAt(index)) {\n      case 34:\n        escape = \"&quot;\";\n        break;\n      case 39:\n        escape = \"&#39;\";\n        break;\n      case 38:\n        escape = \"&amp;\";\n        break;\n      case 60:\n        escape = \"&lt;\";\n        break;\n      case 62:\n        escape = \"&gt;\";\n        break;\n      default:\n        continue;\n    }\n    buffer[0] += str.substring(lastIndex, index) + escape;\n    lastIndex = index + 1;\n  }\n  buffer[0] += str.substring(lastIndex, index);\n};\nvar resolveCallbackSync = (str) => {\n  const callbacks = str.callbacks;\n  if (!callbacks?.length) {\n    return str;\n  }\n  const buffer = [str];\n  const context = {};\n  callbacks.forEach((c) => c({ phase: HtmlEscapedCallbackPhase.Stringify, buffer, context }));\n  return buffer[0];\n};\nvar resolveCallback = async (str, phase, preserveCallbacks, context, buffer) => {\n  if (typeof str === \"object\" && !(str instanceof String)) {\n    if (!(str instanceof Promise)) {\n      str = str.toString();\n    }\n    if (str instanceof Promise) {\n      str = await str;\n    }\n  }\n  const callbacks = str.callbacks;\n  if (!callbacks?.length) {\n    return Promise.resolve(str);\n  }\n  if (buffer) {\n    buffer[0] += str;\n  } else {\n    buffer = [str];\n  }\n  const resStr = Promise.all(callbacks.map((c) => c({ phase, buffer, context }))).then(\n    (res) => Promise.all(\n      res.filter(Boolean).map((str2) => resolveCallback(str2, phase, false, context, buffer))\n    ).then(() => buffer[0])\n  );\n  if (preserveCallbacks) {\n    return raw(await resStr, callbacks);\n  } else {\n    return resStr;\n  }\n};\nexport {\n  HtmlEscapedCallbackPhase,\n  escapeToBuffer,\n  raw,\n  resolveCallback,\n  resolveCallbackSync,\n  stringBufferToString\n};\n", "// src/context.ts\nimport { HonoRequest } from \"./request.js\";\nimport { HtmlEscapedCallbackPhase, resolveCallback } from \"./utils/html.js\";\nvar TEXT_PLAIN = \"text/plain; charset=UTF-8\";\nvar setDefaultContentType = (contentType, headers) => {\n  return {\n    \"Content-Type\": contentType,\n    ...headers\n  };\n};\nvar Context = class {\n  #rawRequest;\n  #req;\n  env = {};\n  #var;\n  finalized = false;\n  error;\n  #status;\n  #executionCtx;\n  #res;\n  #layout;\n  #renderer;\n  #notFoundHandler;\n  #preparedHeaders;\n  #matchResult;\n  #path;\n  constructor(req, options) {\n    this.#rawRequest = req;\n    if (options) {\n      this.#executionCtx = options.executionCtx;\n      this.env = options.env;\n      this.#notFoundHandler = options.notFoundHandler;\n      this.#path = options.path;\n      this.#matchResult = options.matchResult;\n    }\n  }\n  get req() {\n    this.#req ??= new HonoRequest(this.#rawRequest, this.#path, this.#matchResult);\n    return this.#req;\n  }\n  get event() {\n    if (this.#executionCtx && \"respondWith\" in this.#executionCtx) {\n      return this.#executionCtx;\n    } else {\n      throw Error(\"This context has no FetchEvent\");\n    }\n  }\n  get executionCtx() {\n    if (this.#executionCtx) {\n      return this.#executionCtx;\n    } else {\n      throw Error(\"This context has no ExecutionContext\");\n    }\n  }\n  get res() {\n    return this.#res ||= new Response(null, {\n      headers: this.#preparedHeaders ??= new Headers()\n    });\n  }\n  set res(_res) {\n    if (this.#res && _res) {\n      _res = new Response(_res.body, _res);\n      for (const [k, v] of this.#res.headers.entries()) {\n        if (k === \"content-type\") {\n          continue;\n        }\n        if (k === \"set-cookie\") {\n          const cookies = this.#res.headers.getSetCookie();\n          _res.headers.delete(\"set-cookie\");\n          for (const cookie of cookies) {\n            _res.headers.append(\"set-cookie\", cookie);\n          }\n        } else {\n          _res.headers.set(k, v);\n        }\n      }\n    }\n    this.#res = _res;\n    this.finalized = true;\n  }\n  render = (...args) => {\n    this.#renderer ??= (content) => this.html(content);\n    return this.#renderer(...args);\n  };\n  setLayout = (layout) => this.#layout = layout;\n  getLayout = () => this.#layout;\n  setRenderer = (renderer) => {\n    this.#renderer = renderer;\n  };\n  header = (name, value, options) => {\n    if (this.finalized) {\n      this.#res = new Response(this.#res.body, this.#res);\n    }\n    const headers = this.#res ? this.#res.headers : this.#preparedHeaders ??= new Headers();\n    if (value === void 0) {\n      headers.delete(name);\n    } else if (options?.append) {\n      headers.append(name, value);\n    } else {\n      headers.set(name, value);\n    }\n  };\n  status = (status) => {\n    this.#status = status;\n  };\n  set = (key, value) => {\n    this.#var ??= /* @__PURE__ */ new Map();\n    this.#var.set(key, value);\n  };\n  get = (key) => {\n    return this.#var ? this.#var.get(key) : void 0;\n  };\n  get var() {\n    if (!this.#var) {\n      return {};\n    }\n    return Object.fromEntries(this.#var);\n  }\n  #newResponse(data, arg, headers) {\n    const responseHeaders = this.#res ? new Headers(this.#res.headers) : this.#preparedHeaders ?? new Headers();\n    if (typeof arg === \"object\" && \"headers\" in arg) {\n      const argHeaders = arg.headers instanceof Headers ? arg.headers : new Headers(arg.headers);\n      for (const [key, value] of argHeaders) {\n        if (key.toLowerCase() === \"set-cookie\") {\n          responseHeaders.append(key, value);\n        } else {\n          responseHeaders.set(key, value);\n        }\n      }\n    }\n    if (headers) {\n      for (const [k, v] of Object.entries(headers)) {\n        if (typeof v === \"string\") {\n          responseHeaders.set(k, v);\n        } else {\n          responseHeaders.delete(k);\n          for (const v2 of v) {\n            responseHeaders.append(k, v2);\n          }\n        }\n      }\n    }\n    const status = typeof arg === \"number\" ? arg : arg?.status ?? this.#status;\n    return new Response(data, { status, headers: responseHeaders });\n  }\n  newResponse = (...args) => this.#newResponse(...args);\n  body = (data, arg, headers) => this.#newResponse(data, arg, headers);\n  text = (text, arg, headers) => {\n    return !this.#preparedHeaders && !this.#status && !arg && !headers && !this.finalized ? new Response(text) : this.#newResponse(\n      text,\n      arg,\n      setDefaultContentType(TEXT_PLAIN, headers)\n    );\n  };\n  json = (object, arg, headers) => {\n    return this.#newResponse(\n      JSON.stringify(object),\n      arg,\n      setDefaultContentType(\"application/json\", headers)\n    );\n  };\n  html = (html, arg, headers) => {\n    const res = (html2) => this.#newResponse(html2, arg, setDefaultContentType(\"text/html; charset=UTF-8\", headers));\n    return typeof html === \"object\" ? resolveCallback(html, HtmlEscapedCallbackPhase.Stringify, false, {}).then(res) : res(html);\n  };\n  redirect = (location, status) => {\n    const locationString = String(location);\n    this.header(\n      \"Location\",\n      !/[^\\x00-\\xFF]/.test(locationString) ? locationString : encodeURI(locationString)\n    );\n    return this.newResponse(null, status ?? 302);\n  };\n  notFound = () => {\n    this.#notFoundHandler ??= () => new Response();\n    return this.#notFoundHandler(this);\n  };\n};\nexport {\n  Context,\n  TEXT_PLAIN\n};\n", "// src/router.ts\nvar METHOD_NAME_ALL = \"ALL\";\nvar METHOD_NAME_ALL_LOWERCASE = \"all\";\nvar METHODS = [\"get\", \"post\", \"put\", \"delete\", \"options\", \"patch\"];\nvar MESSAGE_MATCHER_IS_ALREADY_BUILT = \"Can not add a route since the matcher is already built.\";\nvar UnsupportedPathError = class extends Error {\n};\nexport {\n  MESSAGE_MATCHER_IS_ALREADY_BUILT,\n  METHODS,\n  METHOD_NAME_ALL,\n  METHOD_NAME_ALL_LOWERCASE,\n  UnsupportedPathError\n};\n", "// src/utils/constants.ts\nvar COMPOSED_HANDLER = \"__COMPOSED_HANDLER\";\nexport {\n  COMPOSED_HANDLER\n};\n", "// src/hono-base.ts\nimport { compose } from \"./compose.js\";\nimport { Context } from \"./context.js\";\nimport { METHODS, METHOD_NAME_ALL, METHOD_NAME_ALL_LOWERCASE } from \"./router.js\";\nimport { COMPOSED_HANDLER } from \"./utils/constants.js\";\nimport { getPath, getPathNoStrict, mergePath } from \"./utils/url.js\";\nvar notFoundHandler = (c) => {\n  return c.text(\"404 Not Found\", 404);\n};\nvar errorHandler = (err, c) => {\n  if (\"getResponse\" in err) {\n    const res = err.getResponse();\n    return c.newResponse(res.body, res);\n  }\n  console.error(err);\n  return c.text(\"Internal Server Error\", 500);\n};\nvar Hono = class {\n  get;\n  post;\n  put;\n  delete;\n  options;\n  patch;\n  all;\n  on;\n  use;\n  router;\n  getPath;\n  _basePath = \"/\";\n  #path = \"/\";\n  routes = [];\n  constructor(options = {}) {\n    const allMethods = [...METHODS, METHOD_NAME_ALL_LOWERCASE];\n    allMethods.forEach((method) => {\n      this[method] = (args1, ...args) => {\n        if (typeof args1 === \"string\") {\n          this.#path = args1;\n        } else {\n          this.#addRoute(method, this.#path, args1);\n        }\n        args.forEach((handler) => {\n          this.#addRoute(method, this.#path, handler);\n        });\n        return this;\n      };\n    });\n    this.on = (method, path, ...handlers) => {\n      for (const p of [path].flat()) {\n        this.#path = p;\n        for (const m of [method].flat()) {\n          handlers.map((handler) => {\n            this.#addRoute(m.toUpperCase(), this.#path, handler);\n          });\n        }\n      }\n      return this;\n    };\n    this.use = (arg1, ...handlers) => {\n      if (typeof arg1 === \"string\") {\n        this.#path = arg1;\n      } else {\n        this.#path = \"*\";\n        handlers.unshift(arg1);\n      }\n      handlers.forEach((handler) => {\n        this.#addRoute(METHOD_NAME_ALL, this.#path, handler);\n      });\n      return this;\n    };\n    const { strict, ...optionsWithoutStrict } = options;\n    Object.assign(this, optionsWithoutStrict);\n    this.getPath = strict ?? true ? options.getPath ?? getPath : getPathNoStrict;\n  }\n  #clone() {\n    const clone = new Hono({\n      router: this.router,\n      getPath: this.getPath\n    });\n    clone.errorHandler = this.errorHandler;\n    clone.#notFoundHandler = this.#notFoundHandler;\n    clone.routes = this.routes;\n    return clone;\n  }\n  #notFoundHandler = notFoundHandler;\n  errorHandler = errorHandler;\n  route(path, app) {\n    const subApp = this.basePath(path);\n    app.routes.map((r) => {\n      let handler;\n      if (app.errorHandler === errorHandler) {\n        handler = r.handler;\n      } else {\n        handler = async (c, next) => (await compose([], app.errorHandler)(c, () => r.handler(c, next))).res;\n        handler[COMPOSED_HANDLER] = r.handler;\n      }\n      subApp.#addRoute(r.method, r.path, handler);\n    });\n    return this;\n  }\n  basePath(path) {\n    const subApp = this.#clone();\n    subApp._basePath = mergePath(this._basePath, path);\n    return subApp;\n  }\n  onError = (handler) => {\n    this.errorHandler = handler;\n    return this;\n  };\n  notFound = (handler) => {\n    this.#notFoundHandler = handler;\n    return this;\n  };\n  mount(path, applicationHandler, options) {\n    let replaceRequest;\n    let optionHandler;\n    if (options) {\n      if (typeof options === \"function\") {\n        optionHandler = options;\n      } else {\n        optionHandler = options.optionHandler;\n        if (options.replaceRequest === false) {\n          replaceRequest = (request) => request;\n        } else {\n          replaceRequest = options.replaceRequest;\n        }\n      }\n    }\n    const getOptions = optionHandler ? (c) => {\n      const options2 = optionHandler(c);\n      return Array.isArray(options2) ? options2 : [options2];\n    } : (c) => {\n      let executionContext = void 0;\n      try {\n        executionContext = c.executionCtx;\n      } catch {\n      }\n      return [c.env, executionContext];\n    };\n    replaceRequest ||= (() => {\n      const mergedPath = mergePath(this._basePath, path);\n      const pathPrefixLength = mergedPath === \"/\" ? 0 : mergedPath.length;\n      return (request) => {\n        const url = new URL(request.url);\n        url.pathname = url.pathname.slice(pathPrefixLength) || \"/\";\n        return new Request(url, request);\n      };\n    })();\n    const handler = async (c, next) => {\n      const res = await applicationHandler(replaceRequest(c.req.raw), ...getOptions(c));\n      if (res) {\n        return res;\n      }\n      await next();\n    };\n    this.#addRoute(METHOD_NAME_ALL, mergePath(path, \"*\"), handler);\n    return this;\n  }\n  #addRoute(method, path, handler) {\n    method = method.toUpperCase();\n    path = mergePath(this._basePath, path);\n    const r = { basePath: this._basePath, path, method, handler };\n    this.router.add(method, path, [handler, r]);\n    this.routes.push(r);\n  }\n  #handleError(err, c) {\n    if (err instanceof Error) {\n      return this.errorHandler(err, c);\n    }\n    throw err;\n  }\n  #dispatch(request, executionCtx, env, method) {\n    if (method === \"HEAD\") {\n      return (async () => new Response(null, await this.#dispatch(request, executionCtx, env, \"GET\")))();\n    }\n    const path = this.getPath(request, { env });\n    const matchResult = this.router.match(method, path);\n    const c = new Context(request, {\n      path,\n      matchResult,\n      env,\n      executionCtx,\n      notFoundHandler: this.#notFoundHandler\n    });\n    if (matchResult[0].length === 1) {\n      let res;\n      try {\n        res = matchResult[0][0][0][0](c, async () => {\n          c.res = await this.#notFoundHandler(c);\n        });\n      } catch (err) {\n        return this.#handleError(err, c);\n      }\n      return res instanceof Promise ? res.then(\n        (resolved) => resolved || (c.finalized ? c.res : this.#notFoundHandler(c))\n      ).catch((err) => this.#handleError(err, c)) : res ?? this.#notFoundHandler(c);\n    }\n    const composed = compose(matchResult[0], this.errorHandler, this.#notFoundHandler);\n    return (async () => {\n      try {\n        const context = await composed(c);\n        if (!context.finalized) {\n          throw new Error(\n            \"Context is not finalized. Did you forget to return a Response object or `await next()`?\"\n          );\n        }\n        return context.res;\n      } catch (err) {\n        return this.#handleError(err, c);\n      }\n    })();\n  }\n  fetch = (request, ...rest) => {\n    return this.#dispatch(request, rest[1], rest[0], request.method);\n  };\n  request = (input, requestInit, Env, executionCtx) => {\n    if (input instanceof Request) {\n      return this.fetch(requestInit ? new Request(input, requestInit) : input, Env, executionCtx);\n    }\n    input = input.toString();\n    return this.fetch(\n      new Request(\n        /^https?:\\/\\//.test(input) ? input : `http://localhost${mergePath(\"/\", input)}`,\n        requestInit\n      ),\n      Env,\n      executionCtx\n    );\n  };\n  fire = () => {\n    addEventListener(\"fetch\", (event) => {\n      event.respondWith(this.#dispatch(event.request, event, void 0, event.request.method));\n    });\n  };\n};\nexport {\n  Hono as HonoBase\n};\n", "// src/router/reg-exp-router/matcher.ts\nimport { METHOD_NAME_ALL } from \"../../router.js\";\nvar emptyParam = [];\nfunction match(method, path) {\n  const matchers = this.buildAllMatchers();\n  const match2 = (method2, path2) => {\n    const matcher = matchers[method2] || matchers[METHOD_NAME_ALL];\n    const staticMatch = matcher[2][path2];\n    if (staticMatch) {\n      return staticMatch;\n    }\n    const match3 = path2.match(matcher[0]);\n    if (!match3) {\n      return [[], emptyParam];\n    }\n    const index = match3.indexOf(\"\", 1);\n    return [matcher[1][index], match3];\n  };\n  this.match = match2;\n  return match2(method, path);\n}\nexport {\n  emptyParam,\n  match\n};\n", "// src/router/reg-exp-router/node.ts\nvar LABEL_REG_EXP_STR = \"[^/]+\";\nvar ONLY_WILDCARD_REG_EXP_STR = \".*\";\nvar TAIL_WILDCARD_REG_EXP_STR = \"(?:|/.*)\";\nvar PATH_ERROR = Symbol();\nvar regExpMetaChars = new Set(\".\\\\+*[^]$()\");\nfunction compareKey(a, b) {\n  if (a.length === 1) {\n    return b.length === 1 ? a < b ? -1 : 1 : -1;\n  }\n  if (b.length === 1) {\n    return 1;\n  }\n  if (a === ONLY_WILDCARD_REG_EXP_STR || a === TAIL_WILDCARD_REG_EXP_STR) {\n    return 1;\n  } else if (b === ONLY_WILDCARD_REG_EXP_STR || b === TAIL_WILDCARD_REG_EXP_STR) {\n    return -1;\n  }\n  if (a === LABEL_REG_EXP_STR) {\n    return 1;\n  } else if (b === LABEL_REG_EXP_STR) {\n    return -1;\n  }\n  return a.length === b.length ? a < b ? -1 : 1 : b.length - a.length;\n}\nvar Node = class {\n  #index;\n  #varIndex;\n  #children = /* @__PURE__ */ Object.create(null);\n  insert(tokens, index, paramMap, context, pathErrorCheckOnly) {\n    if (tokens.length === 0) {\n      if (this.#index !== void 0) {\n        throw PATH_ERROR;\n      }\n      if (pathErrorCheckOnly) {\n        return;\n      }\n      this.#index = index;\n      return;\n    }\n    const [token, ...restTokens] = tokens;\n    const pattern = token === \"*\" ? restTokens.length === 0 ? [\"\", \"\", ONLY_WILDCARD_REG_EXP_STR] : [\"\", \"\", LABEL_REG_EXP_STR] : token === \"/*\" ? [\"\", \"\", TAIL_WILDCARD_REG_EXP_STR] : token.match(/^\\:([^\\{\\}]+)(?:\\{(.+)\\})?$/);\n    let node;\n    if (pattern) {\n      const name = pattern[1];\n      let regexpStr = pattern[2] || LABEL_REG_EXP_STR;\n      if (name && pattern[2]) {\n        if (regexpStr === \".*\") {\n          throw PATH_ERROR;\n        }\n        regexpStr = regexpStr.replace(/^\\((?!\\?:)(?=[^)]+\\)$)/, \"(?:\");\n        if (/\\((?!\\?:)/.test(regexpStr)) {\n          throw PATH_ERROR;\n        }\n      }\n      node = this.#children[regexpStr];\n      if (!node) {\n        if (Object.keys(this.#children).some(\n          (k) => k !== ONLY_WILDCARD_REG_EXP_STR && k !== TAIL_WILDCARD_REG_EXP_STR\n        )) {\n          throw PATH_ERROR;\n        }\n        if (pathErrorCheckOnly) {\n          return;\n        }\n        node = this.#children[regexpStr] = new Node();\n        if (name !== \"\") {\n          node.#varIndex = context.varIndex++;\n        }\n      }\n      if (!pathErrorCheckOnly && name !== \"\") {\n        paramMap.push([name, node.#varIndex]);\n      }\n    } else {\n      node = this.#children[token];\n      if (!node) {\n        if (Object.keys(this.#children).some(\n          (k) => k.length > 1 && k !== ONLY_WILDCARD_REG_EXP_STR && k !== TAIL_WILDCARD_REG_EXP_STR\n        )) {\n          throw PATH_ERROR;\n        }\n        if (pathErrorCheckOnly) {\n          return;\n        }\n        node = this.#children[token] = new Node();\n      }\n    }\n    node.insert(restTokens, index, paramMap, context, pathErrorCheckOnly);\n  }\n  buildRegExpStr() {\n    const childKeys = Object.keys(this.#children).sort(compareKey);\n    const strList = childKeys.map((k) => {\n      const c = this.#children[k];\n      return (typeof c.#varIndex === \"number\" ? `(${k})@${c.#varIndex}` : regExpMetaChars.has(k) ? `\\\\${k}` : k) + c.buildRegExpStr();\n    });\n    if (typeof this.#index === \"number\") {\n      strList.unshift(`#${this.#index}`);\n    }\n    if (strList.length === 0) {\n      return \"\";\n    }\n    if (strList.length === 1) {\n      return strList[0];\n    }\n    return \"(?:\" + strList.join(\"|\") + \")\";\n  }\n};\nexport {\n  Node,\n  PATH_ERROR\n};\n", "// src/router/reg-exp-router/trie.ts\nimport { Node } from \"./node.js\";\nvar Trie = class {\n  #context = { varIndex: 0 };\n  #root = new Node();\n  insert(path, index, pathErrorCheckOnly) {\n    const paramAssoc = [];\n    const groups = [];\n    for (let i = 0; ; ) {\n      let replaced = false;\n      path = path.replace(/\\{[^}]+\\}/g, (m) => {\n        const mark = `@\\\\${i}`;\n        groups[i] = [mark, m];\n        i++;\n        replaced = true;\n        return mark;\n      });\n      if (!replaced) {\n        break;\n      }\n    }\n    const tokens = path.match(/(?::[^\\/]+)|(?:\\/\\*$)|./g) || [];\n    for (let i = groups.length - 1; i >= 0; i--) {\n      const [mark] = groups[i];\n      for (let j = tokens.length - 1; j >= 0; j--) {\n        if (tokens[j].indexOf(mark) !== -1) {\n          tokens[j] = tokens[j].replace(mark, groups[i][1]);\n          break;\n        }\n      }\n    }\n    this.#root.insert(tokens, index, paramAssoc, this.#context, pathErrorCheckOnly);\n    return paramAssoc;\n  }\n  buildRegExp() {\n    let regexp = this.#root.buildRegExpStr();\n    if (regexp === \"\") {\n      return [/^$/, [], []];\n    }\n    let captureIndex = 0;\n    const indexReplacementMap = [];\n    const paramReplacementMap = [];\n    regexp = regexp.replace(/#(\\d+)|@(\\d+)|\\.\\*\\$/g, (_, handlerIndex, paramIndex) => {\n      if (handlerIndex !== void 0) {\n        indexReplacementMap[++captureIndex] = Number(handlerIndex);\n        return \"$()\";\n      }\n      if (paramIndex !== void 0) {\n        paramReplacementMap[Number(paramIndex)] = ++captureIndex;\n        return \"\";\n      }\n      return \"\";\n    });\n    return [new RegExp(`^${regexp}`), indexReplacementMap, paramReplacementMap];\n  }\n};\nexport {\n  Trie\n};\n", "// src/router/reg-exp-router/router.ts\nimport {\n  MESSAGE_MATCHER_IS_ALREADY_BUILT,\n  METHOD_NAME_ALL,\n  UnsupportedPathError\n} from \"../../router.js\";\nimport { checkOptionalParameter } from \"../../utils/url.js\";\nimport { match, emptyParam } from \"./matcher.js\";\nimport { PATH_ERROR } from \"./node.js\";\nimport { Trie } from \"./trie.js\";\nvar nullMatcher = [/^$/, [], /* @__PURE__ */ Object.create(null)];\nvar wildcardRegExpCache = /* @__PURE__ */ Object.create(null);\nfunction buildWildcardRegExp(path) {\n  return wildcardRegExpCache[path] ??= new RegExp(\n    path === \"*\" ? \"\" : `^${path.replace(\n      /\\/\\*$|([.\\\\+*[^\\]$()])/g,\n      (_, metaChar) => metaChar ? `\\\\${metaChar}` : \"(?:|/.*)\"\n    )}$`\n  );\n}\nfunction clearWildcardRegExpCache() {\n  wildcardRegExpCache = /* @__PURE__ */ Object.create(null);\n}\nfunction buildMatcherFromPreprocessedRoutes(routes) {\n  const trie = new Trie();\n  const handlerData = [];\n  if (routes.length === 0) {\n    return nullMatcher;\n  }\n  const routesWithStaticPathFlag = routes.map(\n    (route) => [!/\\*|\\/:/.test(route[0]), ...route]\n  ).sort(\n    ([isStaticA, pathA], [isStaticB, pathB]) => isStaticA ? 1 : isStaticB ? -1 : pathA.length - pathB.length\n  );\n  const staticMap = /* @__PURE__ */ Object.create(null);\n  for (let i = 0, j = -1, len = routesWithStaticPathFlag.length; i < len; i++) {\n    const [pathErrorCheckOnly, path, handlers] = routesWithStaticPathFlag[i];\n    if (pathErrorCheckOnly) {\n      staticMap[path] = [handlers.map(([h]) => [h, /* @__PURE__ */ Object.create(null)]), emptyParam];\n    } else {\n      j++;\n    }\n    let paramAssoc;\n    try {\n      paramAssoc = trie.insert(path, j, pathErrorCheckOnly);\n    } catch (e) {\n      throw e === PATH_ERROR ? new UnsupportedPathError(path) : e;\n    }\n    if (pathErrorCheckOnly) {\n      continue;\n    }\n    handlerData[j] = handlers.map(([h, paramCount]) => {\n      const paramIndexMap = /* @__PURE__ */ Object.create(null);\n      paramCount -= 1;\n      for (; paramCount >= 0; paramCount--) {\n        const [key, value] = paramAssoc[paramCount];\n        paramIndexMap[key] = value;\n      }\n      return [h, paramIndexMap];\n    });\n  }\n  const [regexp, indexReplacementMap, paramReplacementMap] = trie.buildRegExp();\n  for (let i = 0, len = handlerData.length; i < len; i++) {\n    for (let j = 0, len2 = handlerData[i].length; j < len2; j++) {\n      const map = handlerData[i][j]?.[1];\n      if (!map) {\n        continue;\n      }\n      const keys = Object.keys(map);\n      for (let k = 0, len3 = keys.length; k < len3; k++) {\n        map[keys[k]] = paramReplacementMap[map[keys[k]]];\n      }\n    }\n  }\n  const handlerMap = [];\n  for (const i in indexReplacementMap) {\n    handlerMap[i] = handlerData[indexReplacementMap[i]];\n  }\n  return [regexp, handlerMap, staticMap];\n}\nfunction findMiddleware(middleware, path) {\n  if (!middleware) {\n    return void 0;\n  }\n  for (const k of Object.keys(middleware).sort((a, b) => b.length - a.length)) {\n    if (buildWildcardRegExp(k).test(path)) {\n      return [...middleware[k]];\n    }\n  }\n  return void 0;\n}\nvar RegExpRouter = class {\n  name = \"RegExpRouter\";\n  #middleware;\n  #routes;\n  constructor() {\n    this.#middleware = { [METHOD_NAME_ALL]: /* @__PURE__ */ Object.create(null) };\n    this.#routes = { [METHOD_NAME_ALL]: /* @__PURE__ */ Object.create(null) };\n  }\n  add(method, path, handler) {\n    const middleware = this.#middleware;\n    const routes = this.#routes;\n    if (!middleware || !routes) {\n      throw new Error(MESSAGE_MATCHER_IS_ALREADY_BUILT);\n    }\n    if (!middleware[method]) {\n      ;\n      [middleware, routes].forEach((handlerMap) => {\n        handlerMap[method] = /* @__PURE__ */ Object.create(null);\n        Object.keys(handlerMap[METHOD_NAME_ALL]).forEach((p) => {\n          handlerMap[method][p] = [...handlerMap[METHOD_NAME_ALL][p]];\n        });\n      });\n    }\n    if (path === \"/*\") {\n      path = \"*\";\n    }\n    const paramCount = (path.match(/\\/:/g) || []).length;\n    if (/\\*$/.test(path)) {\n      const re = buildWildcardRegExp(path);\n      if (method === METHOD_NAME_ALL) {\n        Object.keys(middleware).forEach((m) => {\n          middleware[m][path] ||= findMiddleware(middleware[m], path) || findMiddleware(middleware[METHOD_NAME_ALL], path) || [];\n        });\n      } else {\n        middleware[method][path] ||= findMiddleware(middleware[method], path) || findMiddleware(middleware[METHOD_NAME_ALL], path) || [];\n      }\n      Object.keys(middleware).forEach((m) => {\n        if (method === METHOD_NAME_ALL || method === m) {\n          Object.keys(middleware[m]).forEach((p) => {\n            re.test(p) && middleware[m][p].push([handler, paramCount]);\n          });\n        }\n      });\n      Object.keys(routes).forEach((m) => {\n        if (method === METHOD_NAME_ALL || method === m) {\n          Object.keys(routes[m]).forEach(\n            (p) => re.test(p) && routes[m][p].push([handler, paramCount])\n          );\n        }\n      });\n      return;\n    }\n    const paths = checkOptionalParameter(path) || [path];\n    for (let i = 0, len = paths.length; i < len; i++) {\n      const path2 = paths[i];\n      Object.keys(routes).forEach((m) => {\n        if (method === METHOD_NAME_ALL || method === m) {\n          routes[m][path2] ||= [\n            ...findMiddleware(middleware[m], path2) || findMiddleware(middleware[METHOD_NAME_ALL], path2) || []\n          ];\n          routes[m][path2].push([handler, paramCount - len + i + 1]);\n        }\n      });\n    }\n  }\n  match = match;\n  buildAllMatchers() {\n    const matchers = /* @__PURE__ */ Object.create(null);\n    Object.keys(this.#routes).concat(Object.keys(this.#middleware)).forEach((method) => {\n      matchers[method] ||= this.#buildMatcher(method);\n    });\n    this.#middleware = this.#routes = void 0;\n    clearWildcardRegExpCache();\n    return matchers;\n  }\n  #buildMatcher(method) {\n    const routes = [];\n    let hasOwnRoute = method === METHOD_NAME_ALL;\n    [this.#middleware, this.#routes].forEach((r) => {\n      const ownRoute = r[method] ? Object.keys(r[method]).map((path) => [path, r[method][path]]) : [];\n      if (ownRoute.length !== 0) {\n        hasOwnRoute ||= true;\n        routes.push(...ownRoute);\n      } else if (method !== METHOD_NAME_ALL) {\n        routes.push(\n          ...Object.keys(r[METHOD_NAME_ALL]).map((path) => [path, r[METHOD_NAME_ALL][path]])\n        );\n      }\n    });\n    if (!hasOwnRoute) {\n      return null;\n    } else {\n      return buildMatcherFromPreprocessedRoutes(routes);\n    }\n  }\n};\nexport {\n  RegExpRouter\n};\n", "// src/router/smart-router/router.ts\nimport { MESSAGE_MATCHER_IS_ALREADY_BUILT, UnsupportedPathError } from \"../../router.js\";\nvar SmartRouter = class {\n  name = \"SmartRouter\";\n  #routers = [];\n  #routes = [];\n  constructor(init) {\n    this.#routers = init.routers;\n  }\n  add(method, path, handler) {\n    if (!this.#routes) {\n      throw new Error(MESSAGE_MATCHER_IS_ALREADY_BUILT);\n    }\n    this.#routes.push([method, path, handler]);\n  }\n  match(method, path) {\n    if (!this.#routes) {\n      throw new Error(\"Fatal error\");\n    }\n    const routers = this.#routers;\n    const routes = this.#routes;\n    const len = routers.length;\n    let i = 0;\n    let res;\n    for (; i < len; i++) {\n      const router = routers[i];\n      try {\n        for (let i2 = 0, len2 = routes.length; i2 < len2; i2++) {\n          router.add(...routes[i2]);\n        }\n        res = router.match(method, path);\n      } catch (e) {\n        if (e instanceof UnsupportedPathError) {\n          continue;\n        }\n        throw e;\n      }\n      this.match = router.match.bind(router);\n      this.#routers = [router];\n      this.#routes = void 0;\n      break;\n    }\n    if (i === len) {\n      throw new Error(\"Fatal error\");\n    }\n    this.name = `SmartRouter + ${this.activeRouter.name}`;\n    return res;\n  }\n  get activeRouter() {\n    if (this.#routes || this.#routers.length !== 1) {\n      throw new Error(\"No active router has been determined yet.\");\n    }\n    return this.#routers[0];\n  }\n};\nexport {\n  SmartRouter\n};\n", "// src/router/trie-router/node.ts\nimport { METHOD_NAME_ALL } from \"../../router.js\";\nimport { getPattern, splitPath, splitRoutingPath } from \"../../utils/url.js\";\nvar emptyParams = /* @__PURE__ */ Object.create(null);\nvar Node = class {\n  #methods;\n  #children;\n  #patterns;\n  #order = 0;\n  #params = emptyParams;\n  constructor(method, handler, children) {\n    this.#children = children || /* @__PURE__ */ Object.create(null);\n    this.#methods = [];\n    if (method && handler) {\n      const m = /* @__PURE__ */ Object.create(null);\n      m[method] = { handler, possibleKeys: [], score: 0 };\n      this.#methods = [m];\n    }\n    this.#patterns = [];\n  }\n  insert(method, path, handler) {\n    this.#order = ++this.#order;\n    let curNode = this;\n    const parts = splitRoutingPath(path);\n    const possibleKeys = [];\n    for (let i = 0, len = parts.length; i < len; i++) {\n      const p = parts[i];\n      const nextP = parts[i + 1];\n      const pattern = getPattern(p, nextP);\n      const key = Array.isArray(pattern) ? pattern[0] : p;\n      if (key in curNode.#children) {\n        curNode = curNode.#children[key];\n        if (pattern) {\n          possibleKeys.push(pattern[1]);\n        }\n        continue;\n      }\n      curNode.#children[key] = new Node();\n      if (pattern) {\n        curNode.#patterns.push(pattern);\n        possibleKeys.push(pattern[1]);\n      }\n      curNode = curNode.#children[key];\n    }\n    curNode.#methods.push({\n      [method]: {\n        handler,\n        possibleKeys: possibleKeys.filter((v, i, a) => a.indexOf(v) === i),\n        score: this.#order\n      }\n    });\n    return curNode;\n  }\n  #getHandlerSets(node, method, nodeParams, params) {\n    const handlerSets = [];\n    for (let i = 0, len = node.#methods.length; i < len; i++) {\n      const m = node.#methods[i];\n      const handlerSet = m[method] || m[METHOD_NAME_ALL];\n      const processedSet = {};\n      if (handlerSet !== void 0) {\n        handlerSet.params = /* @__PURE__ */ Object.create(null);\n        handlerSets.push(handlerSet);\n        if (nodeParams !== emptyParams || params && params !== emptyParams) {\n          for (let i2 = 0, len2 = handlerSet.possibleKeys.length; i2 < len2; i2++) {\n            const key = handlerSet.possibleKeys[i2];\n            const processed = processedSet[handlerSet.score];\n            handlerSet.params[key] = params?.[key] && !processed ? params[key] : nodeParams[key] ?? params?.[key];\n            processedSet[handlerSet.score] = true;\n          }\n        }\n      }\n    }\n    return handlerSets;\n  }\n  search(method, path) {\n    const handlerSets = [];\n    this.#params = emptyParams;\n    const curNode = this;\n    let curNodes = [curNode];\n    const parts = splitPath(path);\n    const curNodesQueue = [];\n    for (let i = 0, len = parts.length; i < len; i++) {\n      const part = parts[i];\n      const isLast = i === len - 1;\n      const tempNodes = [];\n      for (let j = 0, len2 = curNodes.length; j < len2; j++) {\n        const node = curNodes[j];\n        const nextNode = node.#children[part];\n        if (nextNode) {\n          nextNode.#params = node.#params;\n          if (isLast) {\n            if (nextNode.#children[\"*\"]) {\n              handlerSets.push(\n                ...this.#getHandlerSets(nextNode.#children[\"*\"], method, node.#params)\n              );\n            }\n            handlerSets.push(...this.#getHandlerSets(nextNode, method, node.#params));\n          } else {\n            tempNodes.push(nextNode);\n          }\n        }\n        for (let k = 0, len3 = node.#patterns.length; k < len3; k++) {\n          const pattern = node.#patterns[k];\n          const params = node.#params === emptyParams ? {} : { ...node.#params };\n          if (pattern === \"*\") {\n            const astNode = node.#children[\"*\"];\n            if (astNode) {\n              handlerSets.push(...this.#getHandlerSets(astNode, method, node.#params));\n              astNode.#params = params;\n              tempNodes.push(astNode);\n            }\n            continue;\n          }\n          const [key, name, matcher] = pattern;\n          if (!part && !(matcher instanceof RegExp)) {\n            continue;\n          }\n          const child = node.#children[key];\n          const restPathString = parts.slice(i).join(\"/\");\n          if (matcher instanceof RegExp) {\n            const m = matcher.exec(restPathString);\n            if (m) {\n              params[name] = m[0];\n              handlerSets.push(...this.#getHandlerSets(child, method, node.#params, params));\n              if (Object.keys(child.#children).length) {\n                child.#params = params;\n                const componentCount = m[0].match(/\\//)?.length ?? 0;\n                const targetCurNodes = curNodesQueue[componentCount] ||= [];\n                targetCurNodes.push(child);\n              }\n              continue;\n            }\n          }\n          if (matcher === true || matcher.test(part)) {\n            params[name] = part;\n            if (isLast) {\n              handlerSets.push(...this.#getHandlerSets(child, method, params, node.#params));\n              if (child.#children[\"*\"]) {\n                handlerSets.push(\n                  ...this.#getHandlerSets(child.#children[\"*\"], method, params, node.#params)\n                );\n              }\n            } else {\n              child.#params = params;\n              tempNodes.push(child);\n            }\n          }\n        }\n      }\n      curNodes = tempNodes.concat(curNodesQueue.shift() ?? []);\n    }\n    if (handlerSets.length > 1) {\n      handlerSets.sort((a, b) => {\n        return a.score - b.score;\n      });\n    }\n    return [handlerSets.map(({ handler, params }) => [handler, params])];\n  }\n};\nexport {\n  Node\n};\n", "// src/router/trie-router/router.ts\nimport { checkOptionalParameter } from \"../../utils/url.js\";\nimport { Node } from \"./node.js\";\nvar TrieRouter = class {\n  name = \"TrieRouter\";\n  #node;\n  constructor() {\n    this.#node = new Node();\n  }\n  add(method, path, handler) {\n    const results = checkOptionalParameter(path);\n    if (results) {\n      for (let i = 0, len = results.length; i < len; i++) {\n        this.#node.insert(method, results[i], handler);\n      }\n      return;\n    }\n    this.#node.insert(method, path, handler);\n  }\n  match(method, path) {\n    return this.#node.search(method, path);\n  }\n};\nexport {\n  TrieRouter\n};\n", "// src/hono.ts\nimport { HonoBase } from \"./hono-base.js\";\nimport { RegExpRouter } from \"./router/reg-exp-router/index.js\";\nimport { SmartRouter } from \"./router/smart-router/index.js\";\nimport { TrieRouter } from \"./router/trie-router/index.js\";\nvar Hono = class extends HonoBase {\n  constructor(options = {}) {\n    super(options);\n    this.router = options.router ?? new SmartRouter({\n      routers: [new RegExpRouter(), new TrieRouter()]\n    });\n  }\n};\nexport {\n  Hono\n};\n", "// src/middleware/cors/index.ts\nvar cors = (options) => {\n  const defaults = {\n    origin: \"*\",\n    allowMethods: [\"GET\", \"HEAD\", \"PUT\", \"POST\", \"DELETE\", \"PATCH\"],\n    allowHeaders: [],\n    exposeHeaders: []\n  };\n  const opts = {\n    ...defaults,\n    ...options\n  };\n  const findAllowOrigin = ((optsOrigin) => {\n    if (typeof optsOrigin === \"string\") {\n      if (optsOrigin === \"*\") {\n        return () => optsOrigin;\n      } else {\n        return (origin) => optsOrigin === origin ? origin : null;\n      }\n    } else if (typeof optsOrigin === \"function\") {\n      return optsOrigin;\n    } else {\n      return (origin) => optsOrigin.includes(origin) ? origin : null;\n    }\n  })(opts.origin);\n  const findAllowMethods = ((optsAllowMethods) => {\n    if (typeof optsAllowMethods === \"function\") {\n      return optsAllowMethods;\n    } else if (Array.isArray(optsAllowMethods)) {\n      return () => optsAllowMethods;\n    } else {\n      return () => [];\n    }\n  })(opts.allowMethods);\n  return async function cors2(c, next) {\n    function set(key, value) {\n      c.res.headers.set(key, value);\n    }\n    const allowOrigin = await findAllowOrigin(c.req.header(\"origin\") || \"\", c);\n    if (allowOrigin) {\n      set(\"Access-Control-Allow-Origin\", allowOrigin);\n    }\n    if (opts.origin !== \"*\") {\n      const existingVary = c.req.header(\"Vary\");\n      if (existingVary) {\n        set(\"Vary\", existingVary);\n      } else {\n        set(\"Vary\", \"Origin\");\n      }\n    }\n    if (opts.credentials) {\n      set(\"Access-Control-Allow-Credentials\", \"true\");\n    }\n    if (opts.exposeHeaders?.length) {\n      set(\"Access-Control-Expose-Headers\", opts.exposeHeaders.join(\",\"));\n    }\n    if (c.req.method === \"OPTIONS\") {\n      if (opts.maxAge != null) {\n        set(\"Access-Control-Max-Age\", opts.maxAge.toString());\n      }\n      const allowMethods = await findAllowMethods(c.req.header(\"origin\") || \"\", c);\n      if (allowMethods.length) {\n        set(\"Access-Control-Allow-Methods\", allowMethods.join(\",\"));\n      }\n      let headers = opts.allowHeaders;\n      if (!headers?.length) {\n        const requestHeaders = c.req.header(\"Access-Control-Request-Headers\");\n        if (requestHeaders) {\n          headers = requestHeaders.split(/\\s*,\\s*/);\n        }\n      }\n      if (headers?.length) {\n        set(\"Access-Control-Allow-Headers\", headers.join(\",\"));\n        c.res.headers.append(\"Vary\", \"Access-Control-Request-Headers\");\n      }\n      c.res.headers.delete(\"Content-Length\");\n      c.res.headers.delete(\"Content-Type\");\n      return new Response(null, {\n        headers: c.res.headers,\n        status: 204,\n        statusText: \"No Content\"\n      });\n    }\n    await next();\n  };\n};\nexport {\n  cors\n};\n", "// src/utils/color.ts\nfunction getColorEnabled() {\n  const { process, Deno } = globalThis;\n  const isNoColor = typeof Deno?.noColor === \"boolean\" ? Deno.noColor : process !== void 0 ? \"NO_COLOR\" in process?.env : false;\n  return !isNoColor;\n}\nasync function getColorEnabledAsync() {\n  const { navigator } = globalThis;\n  const cfWorkers = \"cloudflare:workers\";\n  const isNoColor = navigator !== void 0 && navigator.userAgent === \"Cloudflare-Workers\" ? await (async () => {\n    try {\n      return \"NO_COLOR\" in ((await import(cfWorkers)).env ?? {});\n    } catch {\n      return false;\n    }\n  })() : !getColorEnabled();\n  return !isNoColor;\n}\nexport {\n  getColorEnabled,\n  getColorEnabledAsync\n};\n", "// src/middleware/logger/index.ts\nimport { getColorEnabledAsync } from \"../../utils/color.js\";\nvar humanize = (times) => {\n  const [delimiter, separator] = [\",\", \".\"];\n  const orderTimes = times.map((v) => v.replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, \"$1\" + delimiter));\n  return orderTimes.join(separator);\n};\nvar time = (start) => {\n  const delta = Date.now() - start;\n  return humanize([delta < 1e3 ? delta + \"ms\" : Math.round(delta / 1e3) + \"s\"]);\n};\nvar colorStatus = async (status) => {\n  const colorEnabled = await getColorEnabledAsync();\n  if (colorEnabled) {\n    switch (status / 100 | 0) {\n      case 5:\n        return `\\x1B[31m${status}\\x1B[0m`;\n      case 4:\n        return `\\x1B[33m${status}\\x1B[0m`;\n      case 3:\n        return `\\x1B[36m${status}\\x1B[0m`;\n      case 2:\n        return `\\x1B[32m${status}\\x1B[0m`;\n    }\n  }\n  return `${status}`;\n};\nasync function log(fn, prefix, method, path, status = 0, elapsed) {\n  const out = prefix === \"<--\" /* Incoming */ ? `${prefix} ${method} ${path}` : `${prefix} ${method} ${path} ${await colorStatus(status)} ${elapsed}`;\n  fn(out);\n}\nvar logger = (fn = console.log) => {\n  return async function logger2(c, next) {\n    const { method, url } = c.req;\n    const path = url.slice(url.indexOf(\"/\", 8));\n    await log(fn, \"<--\" /* Incoming */, method, path);\n    const start = Date.now();\n    await next();\n    await log(fn, \"-->\" /* Outgoing */, method, path, c.res.status, time(start));\n  };\n};\nexport {\n  logger\n};\n", "/**\n * Main application with dynamic automation routing.\n * Automatically registers all enabled automations.\n */\n\nimport { Hono } from 'hono';\nimport { cors } from 'hono/cors';\nimport { logger as honoLogger } from 'hono/logger';\nimport { config } from './config.js';\nimport { getEnabledAutomations } from './core/automation-registry.js';\nimport { logger } from './shared/utils/logger.js';\nimport { monitor } from './shared/utils/monitor.js';\n\n// Initialize monitoring\nmonitor.initMonitoring();\n\nconst app = new Hono();\n\n// Global middleware\napp.use('*', cors());\napp.use('*', honoLogger());\n\n// Platform health check\napp.get('/', (c) => {\n  const enabledAutomations = getEnabledAutomations();\n\n  return c.json({\n    status: 'ok',\n    service: 'automation-platform',\n    version: '1.0.0',\n    environment: config.env,\n    automations: enabledAutomations.map((a) => ({\n      id: a.id,\n      name: a.name,\n      route: a.baseRoute,\n    })),\n    timestamp: new Date().toISOString(),\n  });\n});\n\n// List all automations\napp.get('/automations', (c) => {\n  const enabledAutomations = getEnabledAutomations();\n\n  return c.json({\n    automations: enabledAutomations.map((a) => ({\n      id: a.id,\n      name: a.name,\n      description: a.description,\n      baseRoute: a.baseRoute,\n    })),\n  });\n});\n\n// Dynamically register all enabled automations\nlogger.info('Registering automations...');\nconst enabledAutomations = getEnabledAutomations();\n\nfor (const automation of enabledAutomations) {\n  logger.info(`Registering: ${automation.name}`, {\n    automationId: automation.id,\n    route: automation.baseRoute,\n  });\n\n  automation.setup(app);\n}\n\nlogger.info(`${enabledAutomations.length} automations registered`);\n\n// 404 handler\napp.notFound((c) => {\n  return c.json({ error: 'Not found' }, 404);\n});\n\n// Global error handler\napp.onError((err, c) => {\n  logger.error('Unhandled error', err);\n  monitor.captureException(err);\n\n  return c.json(\n    {\n      error: 'Internal server error',\n      message: config.env === 'development' ? err.message : undefined,\n    },\n    500\n  );\n});\n\n// Log startup info (development)\nif (config.env === 'development') {\n  const port = config.port;\n\n  console.log(`\n\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551                                                            \u2551\n\u2551  \uD83D\uDE80  Multi-Automation Platform                             \u2551\n\u2551                                                            \u2551\n\u2551  Server: http://localhost:${port}                        \u2551\n\u2551  Environment: ${config.env}                              \u2551\n\u2551                                                            \u2551\n\u2551  Enabled Automations:                                      \u2551\n${enabledAutomations\n  .map((a) => `\u2551    \u2022 ${a.name.padEnd(50)}  \u2551`)\n  .join('\\n')}\n\u2551                                                            \u2551\n\u255A\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255D\n  `);\n}\n\nexport default app;\n", "/**\n * Configuration specific to Lead Management automation.\n */\n\nexport const config = {\n  notionDatabase: process.env.LEAD_NOTION_DATABASE_ID!,\n  companiesDatabase: process.env.LEAD_COMPANIES_DATABASE_ID!,\n  peopleDatabase: process.env.LEAD_PEOPLE_DATABASE_ID!,\n  slackChannel: process.env.LEAD_SLACK_CHANNEL_ID!,\n  calcomLink: process.env.LEAD_CALCOM_LINK || '',\n  calcomWebhookSecret: process.env.LEAD_CALCOM_WEBHOOK_SECRET || '',\n\n  google: {\n    clientId: process.env.GOOGLE_CLIENT_ID || '',\n    clientSecret: process.env.GOOGLE_CLIENT_SECRET || '',\n    refreshToken: process.env.GOOGLE_REFRESH_TOKEN || '',\n  },\n\n  features: {\n    minimumBudget: parseInt(process.env.LEAD_MINIMUM_BUDGET || '0'),\n    autoAccept: process.env.LEAD_AUTO_ACCEPT === 'true',\n  },\n\n  budgetRanges: [\n    '$250 - $1000',\n    '$1000 - $5000',\n    '$5000 - $20000',\n    '$20000+',\n  ],\n};\n\n// Validate required config\nif (!config.notionDatabase) {\n  throw new Error('LEAD_NOTION_DATABASE_ID is required');\n}\n\nif (!config.companiesDatabase) {\n  throw new Error('LEAD_COMPANIES_DATABASE_ID is required');\n}\n\nif (!config.peopleDatabase) {\n  throw new Error('LEAD_PEOPLE_DATABASE_ID is required');\n}\n\nif (!config.slackChannel) {\n  throw new Error('LEAD_SLACK_CHANNEL_ID is required');\n}\n", "/**\n * Gmail webhook handler for incoming lead emails.\n */\n\nimport type { Context } from 'hono';\nimport { google } from 'googleapis';\nimport { logger } from '../../../shared/utils/logger.js';\nimport { monitor } from '../../../shared/utils/monitor.js';\nimport { processLead } from '../workflows/process-lead.js';\nimport { config } from '../config.js';\nimport type { EmailParsedData } from '../types.js';\n\n/**\n * Handle Gmail push notification\n */\nexport async function handleGmailWebhook(c: Context) {\n  try {\n    logger.info('Gmail webhook received', { automationId: 'lead-management' });\n\n    // Parse the Gmail push notification\n    const body = await c.req.json();\n    const message = body.message;\n\n    if (!message || !message.data) {\n      logger.warn('Invalid Gmail webhook payload');\n      return c.json({ success: false, error: 'Invalid payload' }, 400);\n    }\n\n    // Decode the message data\n    const decodedData = Buffer.from(message.data, 'base64').toString('utf-8');\n    const data = JSON.parse(decodedData);\n\n    logger.info('Gmail push notification decoded', { data });\n\n    // Get the message details from Gmail API\n    const emailData = await fetchGmailMessage(data.historyId);\n\n    if (!emailData) {\n      logger.warn('Could not fetch email message');\n      return c.json({ success: false, error: 'Could not fetch email' }, 400);\n    }\n\n    // Process the lead\n    await processLead(emailData);\n\n    return c.json({\n      success: true,\n      message: 'Lead processed successfully',\n    });\n  } catch (error) {\n    logger.error('Error handling Gmail webhook', error);\n    monitor.captureException(error, {\n      automationId: 'lead-management',\n      webhook: 'gmail',\n    });\n\n    return c.json(\n      {\n        success: false,\n        error: 'Internal server error',\n      },\n      500\n    );\n  }\n}\n\n/**\n * Fetch email message from Gmail API\n */\nasync function fetchGmailMessage(historyId: string): Promise<EmailParsedData | null> {\n  try {\n    // Initialize Gmail API client\n    const oauth2Client = new google.auth.OAuth2(\n      config.google.clientId,\n      config.google.clientSecret\n    );\n\n    oauth2Client.setCredentials({\n      refresh_token: config.google.refreshToken,\n    });\n\n    const gmail = google.gmail({ version: 'v1', auth: oauth2Client });\n\n    // Get the latest message\n    const response = await gmail.users.messages.list({\n      userId: 'me',\n      maxResults: 1,\n      q: 'is:unread', // Only fetch unread messages\n    });\n\n    const messages = response.data.messages;\n\n    if (!messages || messages.length === 0) {\n      return null;\n    }\n\n    const messageId = messages[0].id!;\n\n    // Get full message details\n    const message = await gmail.users.messages.get({\n      userId: 'me',\n      id: messageId,\n      format: 'full',\n    });\n\n    // Extract headers\n    const headers = message.data.payload?.headers || [];\n    const from = headers.find((h) => h.name?.toLowerCase() === 'from')?.value || '';\n    const subject = headers.find((h) => h.name?.toLowerCase() === 'subject')?.value || '';\n\n    // Extract body\n    let body = '';\n    if (message.data.payload?.body?.data) {\n      body = Buffer.from(message.data.payload.body.data, 'base64').toString('utf-8');\n    } else if (message.data.payload?.parts) {\n      // Handle multipart messages\n      for (const part of message.data.payload.parts) {\n        if (part.mimeType === 'text/plain' && part.body?.data) {\n          body = Buffer.from(part.body.data, 'base64').toString('utf-8');\n          break;\n        }\n      }\n    }\n\n    // Mark as read\n    await gmail.users.messages.modify({\n      userId: 'me',\n      id: messageId,\n      requestBody: {\n        removeLabelIds: ['UNREAD'],\n      },\n    });\n\n    logger.info('Email fetched successfully', { messageId, from, subject });\n\n    return {\n      from,\n      subject,\n      body,\n    };\n  } catch (error) {\n    logger.error('Error fetching Gmail message', error);\n    return null;\n  }\n}\n", "/**\n * Error monitoring with Sentry.\n */\n\nimport * as Sentry from '@sentry/node';\nimport { config } from '../../config.js';\nimport { logger } from './logger.js';\n\n/**\n * Initialize Sentry\n */\nexport function initMonitoring() {\n  if (config.observability.sentry.dsn) {\n    Sentry.init({\n      dsn: config.observability.sentry.dsn,\n      environment: config.env,\n      tracesSampleRate: config.env === 'production' ? 0.1 : 1.0,\n    });\n\n    logger.info('Sentry monitoring initialized');\n  }\n}\n\n/**\n * Capture an exception\n */\nexport function captureException(error: Error | unknown, context?: Record<string, any>) {\n  logger.error('Exception captured', error);\n\n  if (config.observability.sentry.dsn) {\n    Sentry.captureException(error, {\n      extra: context,\n    });\n  }\n}\n\n/**\n * Capture a message\n */\nexport function captureMessage(message: string, level: Sentry.SeverityLevel = 'info') {\n  if (config.observability.sentry.dsn) {\n    Sentry.captureMessage(message, level);\n  }\n}\n\n/**\n * Set user context\n */\nexport function setUser(user: { id: string; email?: string; username?: string }) {\n  if (config.observability.sentry.dsn) {\n    Sentry.setUser(user);\n  }\n}\n\n/**\n * Add breadcrumb\n */\nexport function addBreadcrumb(breadcrumb: Sentry.Breadcrumb) {\n  if (config.observability.sentry.dsn) {\n    Sentry.addBreadcrumb(breadcrumb);\n  }\n}\n\nexport const monitor = {\n  initMonitoring,\n  captureException,\n  captureMessage,\n  setUser,\n  addBreadcrumb,\n};\n", "/**\n * Generic Notion service used by all automations.\n * Provides reusable CRUD operations.\n */\n\nimport { Client } from '@notionhq/client';\nimport { config } from '../../config.js';\nimport { withRetry } from '../utils/retry.js';\nimport { logger } from '../utils/logger.js';\n\nconst notion = new Client({ auth: config.notion.apiKey });\n\n/**\n * Create a page in any database\n */\nexport async function createPage(databaseId: string, properties: Record<string, any>) {\n  logger.info('Creating Notion page', { databaseId });\n\n  return withRetry(() =>\n    notion.pages.create({\n      parent: { database_id: databaseId },\n      properties,\n    })\n  );\n}\n\n/**\n * Update any page\n */\nexport async function updatePage(pageId: string, properties: Record<string, any>) {\n  logger.info('Updating Notion page', { pageId });\n\n  return withRetry(() =>\n    notion.pages.update({\n      page_id: pageId,\n      properties,\n    })\n  );\n}\n\n/**\n * Query a database with optional filter\n */\nexport async function queryDatabase(databaseId: string, filter?: any) {\n  return withRetry(() =>\n    notion.databases.query({\n      database_id: databaseId,\n      filter,\n    })\n  );\n}\n\n/**\n * Find page by property value\n */\nexport async function findPageByProperty(\n  databaseId: string,\n  propertyName: string,\n  propertyType: 'email' | 'rich_text' | 'title',\n  value: string\n): Promise<any | null> {\n  const filter: any = { property: propertyName };\n\n  if (propertyType === 'email') {\n    filter.email = { equals: value };\n  } else if (propertyType === 'rich_text') {\n    filter.rich_text = { equals: value };\n  } else if (propertyType === 'title') {\n    filter.title = { equals: value };\n  }\n\n  const results = await queryDatabase(databaseId, filter);\n  return results.results[0] || null;\n}\n\n/**\n * Retrieve a page\n */\nexport async function retrievePage(pageId: string) {\n  return withRetry(() => notion.pages.retrieve({ page_id: pageId }));\n}\n\n/**\n * Retrieve a database\n */\nexport async function retrieveDatabase(databaseId: string) {\n  return withRetry(() => notion.databases.retrieve({ database_id: databaseId }));\n}\n\n/**\n * Get the title property name for a database\n */\nexport async function getTitlePropertyName(databaseId: string): Promise<string> {\n  const db = await retrieveDatabase(databaseId);\n\n  // Find the title property\n  for (const [propName, prop] of Object.entries(db.properties as Record<string, any>)) {\n    if (prop.type === 'title') {\n      logger.info('Found title property', { databaseId, propertyName: propName });\n      return propName;\n    }\n  }\n\n  throw new Error(`No title property found in database ${databaseId}`);\n}\n\n/**\n * Create a comment on a page\n */\nexport async function createComment(pageId: string, text: string) {\n  return withRetry(() =>\n    notion.comments.create({\n      parent: { page_id: pageId },\n      rich_text: [\n        {\n          type: 'text',\n          text: { content: text },\n        },\n      ],\n    })\n  );\n}\n", "/**\n * Process lead workflow: Parse email \u2192 Create Notion record \u2192 Send Slack notification\n */\n\nimport { createPage, getTitlePropertyName } from '../../../shared/services/notion.js';\nimport { sendMessage } from '../../../shared/services/slack.js';\nimport { logger } from '../../../shared/utils/logger.js';\nimport { extractEmail, parseCurrency, cleanText } from '../../../shared/utils/parser.js';\nimport { config } from '../config.js';\nimport { findOrCreateCompany } from './manage-company.js';\nimport { findOrCreateContact } from './manage-contact.js';\nimport type { EmailParsedData, Lead } from '../types.js';\n\n/**\n * Map budget amount to budget range select option\n */\nfunction mapBudgetToRange(budget?: number): string | undefined {\n  if (!budget) return undefined;\n\n  if (budget < 1000) return '$250 - $1000';\n  if (budget < 5000) return '$1000 - $5000';\n  if (budget < 20000) return '$5000 - $20000';\n  return '$20000+';\n}\n\n/**\n * Parse booking email to extract lead information\n */\nexport function parseBookingEmail(emailData: {\n  from: string;\n  subject: string;\n  body: string;\n}): EmailParsedData {\n  const { from, subject, body } = emailData;\n\n  // Extract email\n  const email = extractEmail(from) || '';\n\n  // Try to extract name from \"Name <email@domain.com>\" format\n  const nameMatch = from.match(/^([^<]+)</);\n  const name = nameMatch ? nameMatch[1].trim() : '';\n\n  // Extract company (look for common patterns)\n  const companyMatch = body.match(/company:?\\s*([^\\n]+)/i);\n  const company = companyMatch ? companyMatch[1].trim() : undefined;\n\n  // Extract project description\n  const projectMatch = body.match(/project:?\\s*([^\\n]+(?:\\n(?!\\w+:)[^\\n]+)*)/i);\n  const projectDescription = projectMatch ? cleanText(projectMatch[1]) : body.slice(0, 500);\n\n  // Extract budget\n  const budget = parseCurrency(body) || undefined;\n\n  // Extract timeline\n  const timelineMatch = body.match(/timeline:?\\s*([^\\n]+)/i);\n  const timeline = timelineMatch ? timelineMatch[1].trim() : undefined;\n\n  return {\n    from,\n    subject,\n    body,\n    name,\n    company,\n    projectDescription,\n    budget,\n    timeline,\n  };\n}\n\n/**\n * Create lead in Notion (with company and contact relations)\n */\nexport async function createLeadInNotion(lead: Lead): Promise<string> {\n  logger.info('Creating lead in Notion', { email: lead.email, company: lead.company });\n\n  // Step 1: Find or create company\n  let companyId: string | undefined;\n  if (lead.company) {\n    companyId = await findOrCreateCompany(lead.company);\n  }\n\n  // Step 2: Find or create contact\n  const contactId = await findOrCreateContact(\n    lead.name || '',\n    lead.email,\n    companyId\n  );\n\n  // Step 3: Create lead record\n  // Get the title property name\n  const titleProp = await getTitlePropertyName(config.notionDatabase);\n\n  const properties: any = {\n    [titleProp]: {\n      title: [\n        {\n          text: {\n            content: lead.name || lead.email,\n          },\n        },\n      ],\n    },\n    Status: {\n      status: {\n        name: 'Lead', // Default status\n      },\n    },\n  };\n\n  // Link to company (relation)\n  if (companyId) {\n    properties.Company = {\n      relation: [{ id: companyId }],\n    };\n  }\n\n  // Link to contact (relation)\n  if (contactId) {\n    properties.Contact = {\n      relation: [{ id: contactId }],\n    };\n  }\n\n  // Add description\n  if (lead.projectDescription) {\n    properties.Description = {\n      rich_text: [{ text: { content: lead.projectDescription } }],\n    };\n  }\n\n  // Map budget to select range\n  const budgetRange = mapBudgetToRange(lead.budget);\n  if (budgetRange) {\n    properties.Budget = {\n      select: {\n        name: budgetRange,\n      },\n    };\n  }\n\n  const page = await createPage(config.notionDatabase, properties);\n\n  logger.info('Lead created in Notion', {\n    pageId: page.id,\n    email: lead.email,\n    companyId,\n    contactId,\n    budgetRange,\n  });\n\n  return page.id;\n}\n\n/**\n * Send Slack notification with interactive buttons\n */\nexport async function sendSlackNotification(\n  lead: Lead,\n  notionPageId: string\n): Promise<{ ts: string; channel: string }> {\n  logger.info('Sending Slack notification', { email: lead.email });\n\n  const budgetRange = mapBudgetToRange(lead.budget);\n\n  const blocks = [\n    {\n      type: 'header',\n      text: {\n        type: 'plain_text',\n        text: `\uD83C\uDFAF New Lead: ${lead.name || lead.email}`,\n      },\n    },\n    {\n      type: 'section',\n      fields: [\n        {\n          type: 'mrkdwn',\n          text: `*Email:*\\n${lead.email}`,\n        },\n        {\n          type: 'mrkdwn',\n          text: `*Company:*\\n${lead.company || 'N/A'}`,\n        },\n        {\n          type: 'mrkdwn',\n          text: `*Budget:*\\n${budgetRange || 'N/A'}`,\n        },\n        {\n          type: 'mrkdwn',\n          text: `*Contact:*\\n${lead.name || 'N/A'}`,\n        },\n      ],\n    },\n  ];\n\n  // Add project description\n  if (lead.projectDescription) {\n    blocks.push({\n      type: 'section',\n      text: {\n        type: 'mrkdwn',\n        text: `*Project:*\\n${lead.projectDescription}`,\n      },\n    } as any);\n  }\n\n  // Add Notion link\n  blocks.push({\n    type: 'section',\n    text: {\n      type: 'mrkdwn',\n      text: `<https://notion.so/${notionPageId.replace(/-/g, '')}|View in Notion>`,\n    },\n  } as any);\n\n  // Add action buttons\n  blocks.push({\n    type: 'actions',\n    block_id: 'lead_actions',\n    elements: [\n      {\n        type: 'button',\n        text: {\n          type: 'plain_text',\n          text: '\u2705 Accept Lead',\n        },\n        style: 'primary',\n        action_id: 'accept_lead',\n        value: notionPageId,\n      },\n      {\n        type: 'button',\n        text: {\n          type: 'plain_text',\n          text: '\u274C Reject Lead',\n        },\n        style: 'danger',\n        action_id: 'reject_lead',\n        value: notionPageId,\n      },\n    ],\n  } as any);\n\n  const result = await sendMessage(\n    config.slackChannel,\n    `New lead: ${lead.name || lead.email}`,\n    blocks\n  );\n\n  logger.info('Slack notification sent', { ts: result.ts, channel: result.channel });\n\n  return result;\n}\n\n/**\n * Complete workflow: Process email \u2192 Create Notion \u2192 Send Slack\n */\nexport async function processLead(emailData: EmailParsedData): Promise<void> {\n  logger.info('Processing new lead', { email: emailData.from });\n\n  // Parse email\n  const parsedData = parseBookingEmail({\n    from: emailData.from,\n    subject: emailData.subject,\n    body: emailData.body,\n  });\n\n  // Create lead object\n  const lead: Lead = {\n    email: extractEmail(parsedData.from)!,\n    name: parsedData.name,\n    company: parsedData.company,\n    projectDescription: parsedData.projectDescription,\n    budget: parsedData.budget,\n    timeline: parsedData.timeline,\n    status: 'new',\n  };\n\n  // Create in Notion\n  const notionPageId = await createLeadInNotion(lead);\n\n  // Send Slack notification\n  const { ts, channel } = await sendSlackNotification(lead, notionPageId);\n\n  // Update lead with Slack thread info\n  lead.notionPageId = notionPageId;\n  lead.slackThreadTs = ts;\n\n  logger.info('Lead processed successfully', {\n    email: lead.email,\n    notionPageId,\n    slackThreadTs: ts,\n  });\n}\n", "/**\n * Generic parsing utilities.\n */\n\nimport * as cheerio from 'cheerio';\n\n/**\n * Extract email from text\n */\nexport function extractEmail(text: string): string | null {\n  const emailRegex = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/;\n  const match = text.match(emailRegex);\n  return match ? match[0] : null;\n}\n\n/**\n * Extract multiple emails from text\n */\nexport function extractEmails(text: string): string[] {\n  const emailRegex = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g;\n  return text.match(emailRegex) || [];\n}\n\n/**\n * Extract phone numbers from text\n */\nexport function extractPhoneNumbers(text: string): string[] {\n  const phoneRegex = /(\\+\\d{1,3}[-.]?)?\\(?\\d{3}\\)?[-.]?\\d{3}[-.]?\\d{4}/g;\n  return text.match(phoneRegex) || [];\n}\n\n/**\n * Extract URLs from text\n */\nexport function extractUrls(text: string): string[] {\n  const urlRegex = /(https?:\\/\\/[^\\s]+)/g;\n  return text.match(urlRegex) || [];\n}\n\n/**\n * Parse HTML to plain text\n */\nexport function htmlToText(html: string): string {\n  const $ = cheerio.load(html);\n  return $('body').text().trim();\n}\n\n/**\n * Extract text from HTML elements\n */\nexport function extractFromHtml(html: string, selector: string): string[] {\n  const $ = cheerio.load(html);\n  const results: string[] = [];\n\n  $(selector).each((_, element) => {\n    results.push($(element).text().trim());\n  });\n\n  return results;\n}\n\n/**\n * Parse currency amount from text\n */\nexport function parseCurrency(text: string): number | null {\n  const currencyRegex = /\\$?\\s*(\\d{1,3}(?:,?\\d{3})*(?:\\.\\d{2})?)/;\n  const match = text.match(currencyRegex);\n\n  if (match) {\n    const amount = match[1].replace(/,/g, '');\n    return parseFloat(amount);\n  }\n\n  return null;\n}\n\n/**\n * Parse date from text\n */\nexport function parseDate(text: string): Date | null {\n  try {\n    const date = new Date(text);\n    return isNaN(date.getTime()) ? null : date;\n  } catch {\n    return null;\n  }\n}\n\n/**\n * Clean whitespace from text\n */\nexport function cleanText(text: string): string {\n  return text\n    .replace(/\\s+/g, ' ') // Replace multiple spaces with single space\n    .replace(/\\n\\s*\\n/g, '\\n') // Replace multiple newlines with single newline\n    .trim();\n}\n\n/**\n * Truncate text to a maximum length\n */\nexport function truncate(text: string, maxLength: number, suffix = '...'): string {\n  if (text.length <= maxLength) {\n    return text;\n  }\n\n  return text.slice(0, maxLength - suffix.length) + suffix;\n}\n\n/**\n * Parse key-value pairs from text\n */\nexport function parseKeyValuePairs(text: string): Record<string, string> {\n  const pairs: Record<string, string> = {};\n  const lines = text.split('\\n');\n\n  for (const line of lines) {\n    const match = line.match(/^([^:]+):\\s*(.+)$/);\n    if (match) {\n      const key = match[1].trim().toLowerCase().replace(/\\s+/g, '_');\n      const value = match[2].trim();\n      pairs[key] = value;\n    }\n  }\n\n  return pairs;\n}\n", "/**\n * Company management: Find or create companies\n */\n\nimport { createPage, findPageByProperty, getTitlePropertyName } from '../../../shared/services/notion.js';\nimport { logger } from '../../../shared/utils/logger.js';\nimport { config } from '../config.js';\n\n/**\n * Find or create a company by name\n */\nexport async function findOrCreateCompany(companyName: string): Promise<string> {\n  if (!companyName || companyName.trim() === '') {\n    logger.warn('No company name provided');\n    return '';\n  }\n\n  logger.info('Finding or creating company', { companyName });\n\n  // Get the title property name\n  const titleProp = await getTitlePropertyName(config.companiesDatabase);\n\n  // Search for existing company by name\n  const existingCompany = await findPageByProperty(\n    config.companiesDatabase,\n    titleProp,\n    'title',\n    companyName\n  );\n\n  if (existingCompany) {\n    logger.info('Company found', { companyId: existingCompany.id, companyName });\n    return existingCompany.id;\n  }\n\n  // Company doesn't exist, create it\n  logger.info('Creating new company', { companyName });\n\n  const properties: any = {\n    [titleProp]: {\n      title: [\n        {\n          text: {\n            content: companyName,\n          },\n        },\n      ],\n    },\n  };\n\n  // Add Status if it exists (optional)\n  try {\n    properties.Status = {\n      select: {\n        name: 'Active',\n      },\n    };\n  } catch (e) {\n    // Status property might not exist, that's okay\n  }\n\n  const newCompany = await createPage(config.companiesDatabase, properties);\n\n  logger.info('Company created', { companyId: newCompany.id, companyName });\n\n  return newCompany.id;\n}\n", "/**\n * Contact/People management: Find or create contacts\n */\n\nimport { createPage, findPageByProperty, updatePage, getTitlePropertyName } from '../../../shared/services/notion.js';\nimport { logger } from '../../../shared/utils/logger.js';\nimport { config } from '../config.js';\n\n/**\n * Find or create a contact by email\n */\nexport async function findOrCreateContact(\n  name: string,\n  email: string,\n  companyId?: string\n): Promise<string> {\n  if (!email || email.trim() === '') {\n    logger.warn('No email provided for contact');\n    return '';\n  }\n\n  logger.info('Finding or creating contact', { name, email });\n\n  // Search for existing contact by email\n  const existingContact = await findPageByProperty(\n    config.peopleDatabase,\n    'Email',\n    'email',\n    email\n  );\n\n  if (existingContact) {\n    logger.info('Contact found', { contactId: existingContact.id, email });\n\n    // Update contact if we have new info (name or company)\n    if (name || companyId) {\n      await updateContactInfo(existingContact.id, name, companyId);\n    }\n\n    return existingContact.id;\n  }\n\n  // Contact doesn't exist, create it\n  logger.info('Creating new contact', { name, email });\n\n  // Get the title property name\n  const titleProp = await getTitlePropertyName(config.peopleDatabase);\n\n  const properties: any = {\n    [titleProp]: {\n      title: [\n        {\n          text: {\n            content: name || email,\n          },\n        },\n      ],\n    },\n    Email: {\n      email: email,\n    },\n  };\n\n  // Link to company if provided\n  if (companyId) {\n    properties.Company = {\n      relation: [{ id: companyId }],\n    };\n  }\n\n  const newContact = await createPage(config.peopleDatabase, properties);\n\n  logger.info('Contact created', { contactId: newContact.id, email });\n\n  return newContact.id;\n}\n\n/**\n * Update contact information\n */\nasync function updateContactInfo(\n  contactId: string,\n  name?: string,\n  companyId?: string\n): Promise<void> {\n  const properties: any = {};\n\n  if (name) {\n    const titleProp = await getTitlePropertyName(config.peopleDatabase);\n    properties[titleProp] = {\n      title: [\n        {\n          text: {\n            content: name,\n          },\n        },\n      ],\n    };\n  }\n\n  if (companyId) {\n    properties.Company = {\n      relation: [{ id: companyId }],\n    };\n  }\n\n  if (Object.keys(properties).length > 0) {\n    logger.info('Updating contact', { contactId, hasName: !!name, hasCompany: !!companyId });\n    await updatePage(contactId, properties);\n  }\n}\n", "/**\n * Cal.com webhook handler for booking events.\n */\n\nimport type { Context } from 'hono';\nimport { logger } from '../../../shared/utils/logger.js';\nimport { monitor } from '../../../shared/utils/monitor.js';\nimport {\n  handleBookingConfirmation,\n  handleBookingCancellation,\n  handleBookingRescheduled,\n} from '../workflows/handle-booking.js';\nimport type { CalcomBooking } from '../types.js';\n\n/**\n * Handle Cal.com webhook\n */\nexport async function handleCalcomWebhook(c: Context) {\n  try {\n    logger.info('Cal.com webhook received', { automationId: 'lead-management' });\n\n    // Get the webhook payload\n    const body = await c.req.json<CalcomBooking>();\n\n    logger.info('Cal.com webhook payload', {\n      triggerEvent: body.triggerEvent,\n      bookingId: body.payload?.bookingId,\n    });\n\n    // Handle different event types\n    switch (body.triggerEvent) {\n      case 'BOOKING_CREATED':\n        await handleBookingConfirmation(body);\n        break;\n\n      case 'BOOKING_CANCELLED':\n        await handleBookingCancellation(body);\n        break;\n\n      case 'BOOKING_RESCHEDULED':\n        await handleBookingRescheduled(body);\n        break;\n\n      default:\n        logger.warn('Unknown Cal.com event type', { triggerEvent: body.triggerEvent });\n    }\n\n    return c.json({\n      success: true,\n      message: 'Booking event processed',\n    });\n  } catch (error) {\n    logger.error('Error handling Cal.com webhook', error);\n    monitor.captureException(error, {\n      automationId: 'lead-management',\n      webhook: 'calcom',\n    });\n\n    return c.json(\n      {\n        success: false,\n        error: 'Internal server error',\n      },\n      500\n    );\n  }\n}\n", "/**\n * Handle booking workflow: Update Notion \u2192 Send Slack confirmation\n */\n\nimport { updatePage, findPageByProperty } from '../../../shared/services/notion.js';\nimport { sendThreadReply } from '../../../shared/services/slack.js';\nimport { logger } from '../../../shared/utils/logger.js';\nimport { formatDateTime } from '../../../shared/utils/format.js';\nimport { config } from '../config.js';\nimport type { CalcomBooking } from '../types.js';\n\n/**\n * Find lead by email in Notion\n */\nexport async function findLeadByEmail(email: string): Promise<string | null> {\n  logger.info('Finding lead by email', { email });\n\n  const page = await findPageByProperty(\n    config.notionDatabase,\n    'Email',\n    'email',\n    email\n  );\n\n  return page ? page.id : null;\n}\n\n/**\n * Update lead with booking information\n */\nexport async function updateLeadWithBooking(\n  pageId: string,\n  booking: CalcomBooking\n): Promise<void> {\n  logger.info('Updating lead with booking info', { pageId, bookingId: booking.payload.bookingId });\n\n  const properties: Record<string, any> = {\n    Status: {\n      select: {\n        name: 'booked',\n      },\n    },\n    'Booking Date': {\n      date: {\n        start: booking.payload.startTime,\n      },\n    },\n  };\n\n  // Add booking ID if available\n  if (booking.payload.bookingId) {\n    properties['Booking ID'] = {\n      number: booking.payload.bookingId,\n    };\n  }\n\n  await updatePage(pageId, properties);\n\n  logger.info('Lead updated with booking info', { pageId });\n}\n\n/**\n * Send Slack confirmation message\n */\nexport async function sendSlackBookingConfirmation(\n  email: string,\n  booking: CalcomBooking,\n  threadTs?: string\n): Promise<void> {\n  logger.info('Sending Slack booking confirmation', { email, bookingId: booking.payload.bookingId });\n\n  const { payload } = booking;\n  const attendee = payload.attendees[0];\n\n  const message = `\n\uD83C\uDF89 *Booking Confirmed!*\n\n*Lead:* ${attendee.name} (${attendee.email})\n*Meeting:* ${payload.title}\n*Time:* ${formatDateTime(new Date(payload.startTime))}\n*Duration:* ${payload.description || 'N/A'}\n\nThe discovery call has been scheduled!\n  `.trim();\n\n  if (threadTs) {\n    // Reply in thread if we have the thread timestamp\n    await sendThreadReply(config.slackChannel, threadTs, message);\n  } else {\n    // Otherwise, just send a new message (we'll need to import sendMessage)\n    const { sendMessage } = await import('../../../shared/services/slack');\n    await sendMessage(config.slackChannel, message);\n  }\n\n  logger.info('Slack booking confirmation sent', { email });\n}\n\n/**\n * Complete booking confirmation workflow\n */\nexport async function handleBookingConfirmation(\n  booking: CalcomBooking\n): Promise<void> {\n  logger.info('Handling booking confirmation', {\n    triggerEvent: booking.triggerEvent,\n    bookingId: booking.payload.bookingId,\n  });\n\n  // Get attendee email\n  const attendeeEmail = booking.payload.attendees[0]?.email;\n\n  if (!attendeeEmail) {\n    logger.warn('No attendee email found in booking', { bookingId: booking.payload.bookingId });\n    return;\n  }\n\n  // Find lead in Notion\n  const pageId = await findLeadByEmail(attendeeEmail);\n\n  if (!pageId) {\n    logger.warn('Lead not found for email', { email: attendeeEmail });\n    return;\n  }\n\n  // Update lead with booking info\n  await updateLeadWithBooking(pageId, booking);\n\n  // Send Slack confirmation\n  await sendSlackBookingConfirmation(attendeeEmail, booking);\n\n  logger.info('Booking confirmation handled successfully', {\n    email: attendeeEmail,\n    pageId,\n    bookingId: booking.payload.bookingId,\n  });\n}\n\n/**\n * Handle booking cancellation\n */\nexport async function handleBookingCancellation(\n  booking: CalcomBooking\n): Promise<void> {\n  logger.info('Handling booking cancellation', {\n    bookingId: booking.payload.bookingId,\n  });\n\n  const attendeeEmail = booking.payload.attendees[0]?.email;\n\n  if (!attendeeEmail) {\n    logger.warn('No attendee email found in booking', { bookingId: booking.payload.bookingId });\n    return;\n  }\n\n  // Find lead in Notion\n  const pageId = await findLeadByEmail(attendeeEmail);\n\n  if (!pageId) {\n    logger.warn('Lead not found for email', { email: attendeeEmail });\n    return;\n  }\n\n  // Update status back to accepted\n  await updatePage(pageId, {\n    Status: {\n      select: {\n        name: 'accepted',\n      },\n    },\n  });\n\n  logger.info('Booking cancellation handled', {\n    email: attendeeEmail,\n    pageId,\n  });\n}\n\n/**\n * Handle booking rescheduled\n */\nexport async function handleBookingRescheduled(\n  booking: CalcomBooking\n): Promise<void> {\n  logger.info('Handling booking rescheduled', {\n    bookingId: booking.payload.bookingId,\n  });\n\n  const attendeeEmail = booking.payload.attendees[0]?.email;\n\n  if (!attendeeEmail) {\n    return;\n  }\n\n  const pageId = await findLeadByEmail(attendeeEmail);\n\n  if (!pageId) {\n    return;\n  }\n\n  // Update with new booking time\n  await updateLeadWithBooking(pageId, booking);\n\n  logger.info('Booking rescheduled handled', {\n    email: attendeeEmail,\n    pageId,\n  });\n}\n", "/**\n * Formatting helpers for common data transformations.\n */\n\n/**\n * Format currency\n */\nexport function formatCurrency(amount: number, currency = 'USD'): string {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency,\n  }).format(amount);\n}\n\n/**\n * Format date\n */\nexport function formatDate(date: Date | string, format: 'short' | 'long' | 'iso' = 'short'): string {\n  const d = typeof date === 'string' ? new Date(date) : date;\n\n  if (format === 'iso') {\n    return d.toISOString();\n  }\n\n  return d.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: format === 'long' ? 'long' : 'short',\n    day: 'numeric',\n  });\n}\n\n/**\n * Format date with time\n */\nexport function formatDateTime(date: Date | string): string {\n  const d = typeof date === 'string' ? new Date(date) : date;\n\n  return d.toLocaleString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: '2-digit',\n    hour12: true,\n  });\n}\n\n/**\n * Format relative time (e.g., \"2 hours ago\")\n */\nexport function formatRelativeTime(date: Date | string): string {\n  const d = typeof date === 'string' ? new Date(date) : date;\n  const now = new Date();\n  const diffMs = now.getTime() - d.getTime();\n  const diffSecs = Math.floor(diffMs / 1000);\n  const diffMins = Math.floor(diffSecs / 60);\n  const diffHours = Math.floor(diffMins / 60);\n  const diffDays = Math.floor(diffHours / 24);\n\n  if (diffSecs < 60) {\n    return 'just now';\n  } else if (diffMins < 60) {\n    return `${diffMins} minute${diffMins !== 1 ? 's' : ''} ago`;\n  } else if (diffHours < 24) {\n    return `${diffHours} hour${diffHours !== 1 ? 's' : ''} ago`;\n  } else if (diffDays < 7) {\n    return `${diffDays} day${diffDays !== 1 ? 's' : ''} ago`;\n  } else {\n    return formatDate(d);\n  }\n}\n\n/**\n * Format phone number\n */\nexport function formatPhoneNumber(phone: string): string {\n  const cleaned = phone.replace(/\\D/g, '');\n\n  if (cleaned.length === 10) {\n    return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(6)}`;\n  }\n\n  if (cleaned.length === 11 && cleaned[0] === '1') {\n    return `+1 (${cleaned.slice(1, 4)}) ${cleaned.slice(4, 7)}-${cleaned.slice(7)}`;\n  }\n\n  return phone; // Return original if format is unknown\n}\n\n/**\n * Format file size\n */\nexport function formatFileSize(bytes: number): string {\n  const units = ['B', 'KB', 'MB', 'GB', 'TB'];\n  let size = bytes;\n  let unitIndex = 0;\n\n  while (size >= 1024 && unitIndex < units.length - 1) {\n    size /= 1024;\n    unitIndex++;\n  }\n\n  return `${size.toFixed(2)} ${units[unitIndex]}`;\n}\n\n/**\n * Slugify text (for URLs)\n */\nexport function slugify(text: string): string {\n  return text\n    .toLowerCase()\n    .trim()\n    .replace(/[^\\w\\s-]/g, '') // Remove non-word chars\n    .replace(/[\\s_-]+/g, '-') // Replace spaces and underscores with hyphens\n    .replace(/^-+|-+$/g, ''); // Remove leading/trailing hyphens\n}\n\n/**\n * Capitalize first letter\n */\nexport function capitalize(text: string): string {\n  return text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();\n}\n\n/**\n * Title case\n */\nexport function titleCase(text: string): string {\n  return text\n    .toLowerCase()\n    .split(' ')\n    .map((word) => capitalize(word))\n    .join(' ');\n}\n\n/**\n * Format duration in milliseconds\n */\nexport function formatDuration(ms: number): string {\n  if (ms < 1000) {\n    return `${ms}ms`;\n  }\n\n  const seconds = Math.floor(ms / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n\n  if (hours > 0) {\n    return `${hours}h ${minutes % 60}m`;\n  } else if (minutes > 0) {\n    return `${minutes}m ${seconds % 60}s`;\n  } else {\n    return `${seconds}s`;\n  }\n}\n\n/**\n * Format percentage\n */\nexport function formatPercent(value: number, decimals = 0): string {\n  return `${(value * 100).toFixed(decimals)}%`;\n}\n", "/**\n * Slack interactive webhook handler for lead acceptance buttons.\n */\n\nimport type { Context } from 'hono';\nimport { logger } from '../../../shared/utils/logger.js';\nimport { monitor } from '../../../shared/utils/monitor.js';\nimport { acceptLead, rejectLead } from '../workflows/accept-lead.js';\nimport { updateSlackMessage } from '../workflows/accept-lead.js';\nimport type { SlackInteractionPayload } from '../types.js';\n\n/**\n * Handle Slack interactive webhook\n */\nexport async function handleSlackInteraction(c: Context) {\n  try {\n    logger.info('Slack interaction received', { automationId: 'lead-management' });\n\n    // Parse the payload from form data\n    const body = await c.req.parseBody();\n    const payloadStr = body.payload as string;\n\n    if (!payloadStr) {\n      logger.warn('No payload in Slack interaction');\n      return c.json({ error: 'No payload' }, 400);\n    }\n\n    const payload: SlackInteractionPayload = JSON.parse(payloadStr);\n\n    logger.info('Slack interaction payload', {\n      type: payload.type,\n      actionId: payload.actions?.[0]?.action_id,\n      user: payload.user.username,\n    });\n\n    // Handle different action types\n    if (payload.type === 'block_actions' && payload.actions.length > 0) {\n      const action = payload.actions[0];\n      const pageId = action.value;\n      const actionId = action.action_id;\n      const userName = payload.user.name || payload.user.username;\n\n      const channel = payload.container.channel_id;\n      const messageTs = payload.container.message_ts;\n\n      if (actionId === 'accept_lead') {\n        // Accept the lead\n        await acceptLead(pageId, userName);\n\n        // Update Slack message\n        await updateSlackMessage(channel, messageTs, 'accepted', userName);\n\n        logger.info('Lead accepted', { pageId, userName });\n\n        // Respond to Slack\n        return c.json({\n          response_type: 'in_channel',\n          replace_original: false,\n          text: `\u2705 Lead accepted by ${userName}. Booking link sent!`,\n        });\n      } else if (actionId === 'reject_lead') {\n        // Reject the lead\n        await rejectLead(pageId, userName);\n\n        // Update Slack message\n        await updateSlackMessage(channel, messageTs, 'rejected', userName);\n\n        logger.info('Lead rejected', { pageId, userName });\n\n        // Respond to Slack\n        return c.json({\n          response_type: 'in_channel',\n          replace_original: false,\n          text: `\u274C Lead rejected by ${userName}.`,\n        });\n      }\n    }\n\n    return c.json({ success: true });\n  } catch (error) {\n    logger.error('Error handling Slack interaction', error);\n    monitor.captureException(error, {\n      automationId: 'lead-management',\n      webhook: 'slack',\n    });\n\n    return c.json(\n      {\n        success: false,\n        error: 'Internal server error',\n      },\n      500\n    );\n  }\n}\n", "/**\n * Generic email service using SMTP.\n */\n\nimport nodemailer from 'nodemailer';\nimport { config } from '../../config.js';\nimport { withRetry } from '../utils/retry.js';\nimport { logger } from '../utils/logger.js';\n\nconst transporter = nodemailer.createTransport({\n  host: config.email.smtp.host,\n  port: config.email.smtp.port,\n  secure: false,\n  auth: {\n    user: config.email.smtp.user,\n    pass: config.email.smtp.pass,\n  },\n});\n\n/**\n * Send an email\n */\nexport async function sendEmail(\n  to: string,\n  subject: string,\n  html: string,\n  text?: string\n) {\n  logger.info('Sending email', { to, subject });\n\n  await withRetry(() =>\n    transporter.sendMail({\n      from: `\"${config.email.fromName}\" <${config.email.from}>`,\n      to,\n      subject,\n      html,\n      text: text || html.replace(/<[^>]*>/g, ''),\n    })\n  );\n\n  logger.info('Email sent successfully', { to });\n}\n\n/**\n * Send an email with attachments\n */\nexport async function sendEmailWithAttachments(\n  to: string,\n  subject: string,\n  html: string,\n  attachments: Array<{\n    filename: string;\n    content?: string | Buffer;\n    path?: string;\n  }>,\n  text?: string\n) {\n  logger.info('Sending email with attachments', { to, subject, attachmentCount: attachments.length });\n\n  await withRetry(() =>\n    transporter.sendMail({\n      from: `\"${config.email.fromName}\" <${config.email.from}>`,\n      to,\n      subject,\n      html,\n      text: text || html.replace(/<[^>]*>/g, ''),\n      attachments,\n    })\n  );\n\n  logger.info('Email with attachments sent successfully', { to });\n}\n\n/**\n * Send a templated email\n */\nexport async function sendTemplatedEmail(\n  to: string,\n  subject: string,\n  templateData: {\n    greeting?: string;\n    body: string;\n    cta?: { text: string; url: string };\n    footer?: string;\n  }\n) {\n  const { greeting, body, cta, footer } = templateData;\n\n  const html = `\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <style>\n          body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n            line-height: 1.6;\n            color: #333;\n            max-width: 600px;\n            margin: 0 auto;\n            padding: 20px;\n          }\n          .greeting {\n            font-size: 18px;\n            margin-bottom: 20px;\n          }\n          .body {\n            margin-bottom: 30px;\n          }\n          .cta {\n            margin: 30px 0;\n          }\n          .cta a {\n            display: inline-block;\n            padding: 12px 24px;\n            background-color: #0066cc;\n            color: white;\n            text-decoration: none;\n            border-radius: 5px;\n          }\n          .footer {\n            margin-top: 40px;\n            padding-top: 20px;\n            border-top: 1px solid #ddd;\n            font-size: 14px;\n            color: #666;\n          }\n        </style>\n      </head>\n      <body>\n        ${greeting ? `<div class=\"greeting\">${greeting}</div>` : ''}\n        <div class=\"body\">${body}</div>\n        ${cta ? `<div class=\"cta\"><a href=\"${cta.url}\">${cta.text}</a></div>` : ''}\n        ${footer ? `<div class=\"footer\">${footer}</div>` : ''}\n      </body>\n    </html>\n  `;\n\n  return sendEmail(to, subject, html);\n}\n\n/**\n * Verify SMTP connection\n */\nexport async function verifyConnection(): Promise<boolean> {\n  try {\n    await transporter.verify();\n    logger.info('SMTP connection verified');\n    return true;\n  } catch (error) {\n    logger.error('SMTP connection failed', error);\n    return false;\n  }\n}\n", "/**\n * Accept lead workflow: Update Notion \u2192 Send booking link email \u2192 Update Slack\n */\n\nimport { updatePage, retrievePage } from '../../../shared/services/notion.js';\nimport { sendTemplatedEmail } from '../../../shared/services/email.js';\nimport { updateMessage } from '../../../shared/services/slack.js';\nimport { logger } from '../../../shared/utils/logger.js';\nimport { config } from '../config.js';\n\n/**\n * Update lead status in Notion\n */\nexport async function updateLeadStatus(\n  pageId: string,\n  status: 'accepted' | 'rejected' | 'booked'\n): Promise<void> {\n  logger.info('Updating lead status in Notion', { pageId, status });\n\n  await updatePage(pageId, {\n    Status: {\n      select: {\n        name: status,\n      },\n    },\n  });\n\n  logger.info('Lead status updated', { pageId, status });\n}\n\n/**\n * Get lead email from Notion page\n */\nexport async function getLeadEmail(pageId: string): Promise<string> {\n  const page = await retrievePage(pageId);\n\n  // Extract email from page properties\n  const properties = (page as any).properties;\n  const email = properties.Email?.email;\n\n  if (!email) {\n    throw new Error('Email not found in Notion page');\n  }\n\n  return email;\n}\n\n/**\n * Get lead name from Notion page\n */\nexport async function getLeadName(pageId: string): Promise<string> {\n  const page = await retrievePage(pageId);\n\n  // Extract name from page properties\n  const properties = (page as any).properties;\n  const titleProperty = properties.Name || properties.title;\n\n  if (titleProperty?.title?.[0]?.text?.content) {\n    return titleProperty.title[0].text.content;\n  }\n\n  return 'there'; // Fallback\n}\n\n/**\n * Send booking link email to lead\n */\nexport async function sendBookingLinkEmail(\n  email: string,\n  name: string = 'there'\n): Promise<void> {\n  logger.info('Sending booking link email', { email });\n\n  await sendTemplatedEmail(email, 'Let\\'s schedule a discovery call!', {\n    greeting: `Hi ${name},`,\n    body: `\n      <p>Thanks for reaching out! We'd love to learn more about your project.</p>\n      <p>Please use the link below to schedule a discovery call at a time that works best for you:</p>\n    `,\n    cta: {\n      text: 'Schedule Discovery Call',\n      url: config.calcomLink,\n    },\n    footer: 'Looking forward to speaking with you!',\n  });\n\n  logger.info('Booking link email sent', { email });\n}\n\n/**\n * Update Slack message to show lead accepted\n */\nexport async function updateSlackMessage(\n  channel: string,\n  ts: string,\n  status: 'accepted' | 'rejected',\n  acceptedBy?: string\n): Promise<void> {\n  logger.info('Updating Slack message', { channel, ts, status });\n\n  const emoji = status === 'accepted' ? '\u2705' : '\u274C';\n  const statusText = status === 'accepted' ? 'Accepted' : 'Rejected';\n  const byText = acceptedBy ? ` by ${acceptedBy}` : '';\n\n  // We'll need to get the original message and update it\n  // For now, we'll just add a simple update block\n  await updateMessage(\n    channel,\n    ts,\n    `Lead ${statusText.toLowerCase()}${byText}`,\n    [\n      {\n        type: 'section',\n        text: {\n          type: 'mrkdwn',\n          text: `${emoji} *${statusText}*${byText}`,\n        },\n      },\n    ]\n  );\n\n  logger.info('Slack message updated', { channel, ts, status });\n}\n\n/**\n * Complete accept workflow\n */\nexport async function acceptLead(\n  pageId: string,\n  acceptedBy?: string\n): Promise<void> {\n  logger.info('Accepting lead', { pageId, acceptedBy });\n\n  // Update status in Notion\n  await updateLeadStatus(pageId, 'accepted');\n\n  // Get lead info\n  const email = await getLeadEmail(pageId);\n  const name = await getLeadName(pageId);\n\n  // Send booking link email\n  await sendBookingLinkEmail(email, name);\n\n  logger.info('Lead accepted successfully', {\n    pageId,\n    email,\n    acceptedBy,\n  });\n}\n\n/**\n * Complete reject workflow\n */\nexport async function rejectLead(\n  pageId: string,\n  rejectedBy?: string\n): Promise<void> {\n  logger.info('Rejecting lead', { pageId, rejectedBy });\n\n  // Update status in Notion\n  await updateLeadStatus(pageId, 'rejected');\n\n  logger.info('Lead rejected successfully', {\n    pageId,\n    rejectedBy,\n  });\n}\n", "/**\n * Test webhook for manually creating leads (for testing purposes)\n */\n\nimport type { Context } from 'hono';\nimport { logger } from '../../../shared/utils/logger.js';\nimport { monitor } from '../../../shared/utils/monitor.js';\nimport { processLead } from '../workflows/process-lead.js';\nimport type { EmailParsedData } from '../types.js';\n\n/**\n * Handle test lead creation (simple format for testing)\n */\nexport async function handleTestWebhook(c: Context) {\n  try {\n    logger.info('Test webhook received', { automationId: 'lead-management' });\n\n    const body = await c.req.json();\n\n    // Validate required fields\n    if (!body.from || !body.subject || !body.body) {\n      return c.json({ success: false, error: 'Missing required fields: from, subject, body' }, 400);\n    }\n\n    // Create email data in the format processLead expects\n    const emailData: EmailParsedData = {\n      from: body.from,\n      subject: body.subject,\n      body: body.body,\n    };\n\n    // Process the lead\n    await processLead(emailData);\n\n    return c.json({\n      success: true,\n      message: 'Test lead processed successfully',\n    });\n  } catch (error) {\n    logger.error('Error processing test lead', error);\n    monitor.captureException(error as Error, { automationId: 'lead-management' });\n\n    return c.json(\n      {\n        success: false,\n        error: 'Failed to process test lead',\n        details: error instanceof Error ? error.message : 'Unknown error',\n      },\n      500\n    );\n  }\n}\n", "/**\n * Webhook authentication middleware.\n */\n\nimport type { Context, Next } from 'hono';\nimport { createHmac, timingSafeEqual } from 'crypto';\nimport { config } from '../../config.js';\nimport { logger } from '../utils/logger.js';\n\n/**\n * Verify Slack signature\n */\nexport async function verifySlackSignature(c: Context, next: Next) {\n  const signature = c.req.header('x-slack-signature');\n  const timestamp = c.req.header('x-slack-request-timestamp');\n  const body = await c.req.text();\n\n  if (!signature || !timestamp) {\n    logger.warn('Missing Slack signature headers');\n    return c.json({ error: 'Unauthorized' }, 401);\n  }\n\n  // Check timestamp to prevent replay attacks (5 minutes)\n  const currentTime = Math.floor(Date.now() / 1000);\n  if (Math.abs(currentTime - parseInt(timestamp)) > 300) {\n    logger.warn('Slack request timestamp too old');\n    return c.json({ error: 'Request timestamp too old' }, 401);\n  }\n\n  // Verify signature\n  const sigBasestring = `v0:${timestamp}:${body}`;\n  const hmac = createHmac('sha256', config.slack.signingSecret);\n  hmac.update(sigBasestring);\n  const expectedSignature = `v0=${hmac.digest('hex')}`;\n\n  try {\n    const signatureBuffer = Buffer.from(signature);\n    const expectedBuffer = Buffer.from(expectedSignature);\n\n    if (signatureBuffer.length !== expectedBuffer.length || !timingSafeEqual(signatureBuffer, expectedBuffer)) {\n      logger.warn('Invalid Slack signature');\n      return c.json({ error: 'Invalid signature' }, 401);\n    }\n  } catch (error) {\n    logger.error('Error verifying Slack signature', error);\n    return c.json({ error: 'Invalid signature' }, 401);\n  }\n\n  // Store body for later use\n  c.set('body', body);\n\n  await next();\n}\n\n/**\n * Verify webhook secret via header\n */\nexport function verifyWebhookSecret(secretKey: string) {\n  return async (c: Context, next: Next) => {\n    const providedSecret = c.req.header('x-webhook-secret') || c.req.query('secret');\n\n    if (!providedSecret || providedSecret !== secretKey) {\n      logger.warn('Invalid webhook secret');\n      return c.json({ error: 'Unauthorized' }, 401);\n    }\n\n    await next();\n  };\n}\n\n/**\n * Verify Cal.com webhook signature\n */\nexport function verifyCalcomSignature(secret: string) {\n  return async (c: Context, next: Next) => {\n    const signature = c.req.header('x-cal-signature-256');\n    const body = await c.req.text();\n\n    if (!signature) {\n      logger.warn('Missing Cal.com signature');\n      return c.json({ error: 'Unauthorized' }, 401);\n    }\n\n    const hmac = createHmac('sha256', secret);\n    hmac.update(body);\n    const expectedSignature = hmac.digest('hex');\n\n    if (signature !== expectedSignature) {\n      logger.warn('Invalid Cal.com signature');\n      return c.json({ error: 'Invalid signature' }, 401);\n    }\n\n    // Store body for later use\n    c.set('body', body);\n\n    await next();\n  };\n}\n\n/**\n * Basic auth middleware\n */\nexport function basicAuth(username: string, password: string) {\n  return async (c: Context, next: Next) => {\n    const auth = c.req.header('authorization');\n\n    if (!auth || !auth.startsWith('Basic ')) {\n      return c.json({ error: 'Unauthorized' }, 401);\n    }\n\n    const credentials = Buffer.from(auth.slice(6), 'base64').toString();\n    const [user, pass] = credentials.split(':');\n\n    if (user !== username || pass !== password) {\n      return c.json({ error: 'Unauthorized' }, 401);\n    }\n\n    await next();\n  };\n}\n", "/**\n * Lead Management Automation\n *\n * Handles: Email leads \u2192 Notion \u2192 Slack \u2192 Cal.com bookings\n */\n\nimport type { Hono } from 'hono';\nimport type { Automation } from '../../core/types.js';\nimport { config } from './config.js';\nimport { handleGmailWebhook } from './webhooks/gmail.js';\nimport { handleCalcomWebhook } from './webhooks/calcom.js';\nimport { handleSlackInteraction } from './webhooks/slack.js';\nimport { handleTestWebhook } from './webhooks/test.js';\nimport { verifyCalcomSignature } from '../../shared/middleware/auth.js';\n\n/**\n * Setup function - registers all routes for this automation\n */\nfunction setup(app: Hono) {\n  const base = '/automations/lead-management';\n\n  // Webhook routes\n  app.post(`${base}/webhooks/gmail`, handleGmailWebhook);\n  app.post(`${base}/webhooks/test`, handleTestWebhook);\n\n  // Cal.com webhook with signature verification\n  if (config.calcomWebhookSecret) {\n    app.post(\n      `${base}/webhooks/calcom`,\n      verifyCalcomSignature(config.calcomWebhookSecret),\n      handleCalcomWebhook\n    );\n  } else {\n    app.post(`${base}/webhooks/calcom`, handleCalcomWebhook);\n  }\n\n  app.post(`${base}/webhooks/slack`, handleSlackInteraction);\n\n  // Health check\n  app.get(`${base}/health`, (c) => {\n    return c.json({\n      automation: 'lead-management',\n      status: 'ok',\n      config: {\n        notionDatabase: config.notionDatabase,\n        slackChannel: config.slackChannel,\n        minimumBudget: config.features.minimumBudget,\n        autoAccept: config.features.autoAccept,\n      },\n      timestamp: new Date().toISOString(),\n    });\n  });\n}\n\n/**\n * Export automation definition\n */\nexport const leadManagementAutomation: Automation = {\n  id: 'lead-management',\n  name: 'Lead Management',\n  description: 'Automated lead processing from email to booking',\n  enabled: process.env.LEAD_ENABLED !== 'false',\n  baseRoute: '/automations/lead-management',\n  setup,\n};\n", "/**\n * Central registry for all automations.\n * Each automation registers itself here.\n */\n\nimport type { Automation } from './types.js';\n\n// Import automations\nimport { leadManagementAutomation } from '../automations/lead-management/index.js';\n// Import other automations as you add them\n// import { invoiceAutomation } from '../automations/invoice-automation.js';\n\n/**\n * Register all automations here.\n * To add a new automation:\n * 1. Create folder in src/automations/\n * 2. Import it here\n * 3. Add to this array\n */\nexport const automations: Automation[] = [\n  leadManagementAutomation,\n  // invoiceAutomation,\n];\n\n/**\n * Get only enabled automations\n */\nexport function getEnabledAutomations(): Automation[] {\n  return automations.filter((a) => a.enabled);\n}\n\n/**\n * Get automation by ID\n */\nexport function getAutomation(id: string): Automation | undefined {\n  return automations.find((a) => a.id === id);\n}\n", "/**\n * Vercel serverless function entry point\n */\n\nimport type { VercelRequest, VercelResponse } from '@vercel/node';\nimport app from '../src/app.js';\n\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  const request = new Request(new URL(req.url || '/', `https://${req.headers.host}`), {\n    method: req.method,\n    headers: req.headers as any,\n    body: req.method !== 'GET' && req.method !== 'HEAD' ? JSON.stringify(req.body) : undefined,\n  });\n\n  const response = await app.fetch(request);\n\n  res.status(response.status);\n  response.headers.forEach((value, key) => {\n    res.setHeader(key, value);\n  });\n\n  const text = await response.text();\n  res.send(text);\n}\n"],
  "mappings": "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",
  "names": ["log", "error", "logger", "error", "logger", "logger", "handler", "match", "raw", "handler", "app", "handler", "init", "handler", "Node", "handler", "Node", "handler", "Hono", "process", "logger2", "config", "logger", "captureException", "error", "captureMessage", "setUser", "addBreadcrumb", "logger", "match", "match", "logger", "config", "logger", "config", "logger", "config", "logger", "error", "config", "logger", "config", "sendMessage", "logger", "error", "logger", "logger", "config", "logger", "error", "logger", "error", "logger", "app", "config", "Hono", "enabledAutomations", "logger"]
}
